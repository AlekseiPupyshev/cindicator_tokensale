{
  "stats": {
    "suites": 10,
    "tests": 29,
    "passes": 29,
    "pending": 0,
    "failures": 0,
    "start": "2017-09-07T09:07:53.942Z",
    "end": "2017-09-07T09:08:50.565Z",
    "duration": 56624,
    "testsRegistered": 29,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Contract: Contribution",
        "suites": [
          {
            "title": "#contstructor",
            "suites": [],
            "tests": [
              {
                "title": "#constructor accepts MiniMe instance",
                "fullTitle": "Contract: Contribution #contstructor #constructor accepts MiniMe instance",
                "timedOut": false,
                "duration": 372,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      const tokenFactory = await MiniMeTokenFactory.new();\n      const cnd = await CND.new(tokenFactory.address);\n      const contribution = await Contribution.new(\n        contributionWallet,\n        foundersWallet,\n        advisorsWallet,\n        bountyWallet\n      );\n      await cnd.changeController(contribution.address);\n      await contribution.initializeToken(cnd.address);\n      const miniMe = await contribution.cnd();\n      const contributionWalletAddress = await contribution.contributionWallet();\n      const foundersWalletAddress = await contribution.foundersWallet();\n      const bountyWalletAddress = await contribution.bountyWallet();\n      const advisorsWalletAddress = await contribution.advisorsWallet();\n      assert.equal(\n        miniMe,\n        cnd.address,\n        \"== token address\"\n      );\n      assert.equal(\n        contributionWalletAddress,\n        contributionWallet,\n        \"== contribution wallet address\"\n      );\n      assert.equal(\n        foundersWalletAddress,\n        foundersWallet,\n        \"== founders wallet address\"\n      );\n      assert.equal(\n        bountyWalletAddress,\n        bountyWallet,\n        \"== bounty wallet address\"\n      );\n      assert.equal(\n        advisorsWalletAddress,\n        advisorsWallet,\n        \"== advisors wallet address\"\n      );",
                "err": {},
                "isRoot": false,
                "uuid": "b923a9fc-4ffb-4c1a-aa92-34ae6685f4cd",
                "parentUUID": "76881cba-e8a7-4cfb-bc3c-4b32eeec7768",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws if cnd.controller is not contribution contract",
                "fullTitle": "Contract: Contribution #contstructor throws if cnd.controller is not contribution contract",
                "timedOut": false,
                "duration": 520,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      const tokenFactory = await MiniMeTokenFactory.new();\n      const cnd = await CND.new(tokenFactory.address);\n      const contribution = await Contribution.new(\n        contributionWallet,\n        foundersWallet,\n        advisorsWallet,\n        bountyWallet\n      );\n      await shouldThrow(contribution.initializeToken, [cnd.address]);",
                "err": {},
                "isRoot": false,
                "uuid": "e2ae78fe-aff4-4c33-bd46-4e39a2d665d1",
                "parentUUID": "76881cba-e8a7-4cfb-bc3c-4b32eeec7768",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws if it is not CND based contract",
                "fullTitle": "Contract: Contribution #contstructor throws if it is not CND based contract",
                "timedOut": false,
                "duration": 520,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      const tokenFactory = await MiniMeTokenFactory.new();\n      const genericMiniMe = await MiniMeToken.new(tokenFactory.address, '0x0', 0, \"MiniMe\", 18, \"MMT\", true);\n      const contribution = await Contribution.new(\n        contributionWallet,\n        foundersWallet,\n        advisorsWallet,\n        bountyWallet\n      );\n      await shouldThrow(contribution.initializeToken, [genericMiniMe.address]);",
                "err": {},
                "isRoot": false,
                "uuid": "e3ba15ca-7cbf-4c1a-9c8b-9820e4b1df6a",
                "parentUUID": "76881cba-e8a7-4cfb-bc3c-4b32eeec7768",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 300000,
            "file": "/test/contribution_test.js",
            "uuid": "76881cba-e8a7-4cfb-bc3c-4b32eeec7768",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/rstorm/repos/playFUckingGround/123/test/contribution_test.js",
            "passes": [
              {
                "title": "#constructor accepts MiniMe instance",
                "fullTitle": "Contract: Contribution #contstructor #constructor accepts MiniMe instance",
                "timedOut": false,
                "duration": 372,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      const tokenFactory = await MiniMeTokenFactory.new();\n      const cnd = await CND.new(tokenFactory.address);\n      const contribution = await Contribution.new(\n        contributionWallet,\n        foundersWallet,\n        advisorsWallet,\n        bountyWallet\n      );\n      await cnd.changeController(contribution.address);\n      await contribution.initializeToken(cnd.address);\n      const miniMe = await contribution.cnd();\n      const contributionWalletAddress = await contribution.contributionWallet();\n      const foundersWalletAddress = await contribution.foundersWallet();\n      const bountyWalletAddress = await contribution.bountyWallet();\n      const advisorsWalletAddress = await contribution.advisorsWallet();\n      assert.equal(\n        miniMe,\n        cnd.address,\n        \"== token address\"\n      );\n      assert.equal(\n        contributionWalletAddress,\n        contributionWallet,\n        \"== contribution wallet address\"\n      );\n      assert.equal(\n        foundersWalletAddress,\n        foundersWallet,\n        \"== founders wallet address\"\n      );\n      assert.equal(\n        bountyWalletAddress,\n        bountyWallet,\n        \"== bounty wallet address\"\n      );\n      assert.equal(\n        advisorsWalletAddress,\n        advisorsWallet,\n        \"== advisors wallet address\"\n      );",
                "err": {},
                "isRoot": false,
                "uuid": "b923a9fc-4ffb-4c1a-aa92-34ae6685f4cd",
                "parentUUID": "76881cba-e8a7-4cfb-bc3c-4b32eeec7768",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws if cnd.controller is not contribution contract",
                "fullTitle": "Contract: Contribution #contstructor throws if cnd.controller is not contribution contract",
                "timedOut": false,
                "duration": 520,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      const tokenFactory = await MiniMeTokenFactory.new();\n      const cnd = await CND.new(tokenFactory.address);\n      const contribution = await Contribution.new(\n        contributionWallet,\n        foundersWallet,\n        advisorsWallet,\n        bountyWallet\n      );\n      await shouldThrow(contribution.initializeToken, [cnd.address]);",
                "err": {},
                "isRoot": false,
                "uuid": "e2ae78fe-aff4-4c33-bd46-4e39a2d665d1",
                "parentUUID": "76881cba-e8a7-4cfb-bc3c-4b32eeec7768",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws if it is not CND based contract",
                "fullTitle": "Contract: Contribution #contstructor throws if it is not CND based contract",
                "timedOut": false,
                "duration": 520,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      const tokenFactory = await MiniMeTokenFactory.new();\n      const genericMiniMe = await MiniMeToken.new(tokenFactory.address, '0x0', 0, \"MiniMe\", 18, \"MMT\", true);\n      const contribution = await Contribution.new(\n        contributionWallet,\n        foundersWallet,\n        advisorsWallet,\n        bountyWallet\n      );\n      await shouldThrow(contribution.initializeToken, [genericMiniMe.address]);",
                "err": {},
                "isRoot": false,
                "uuid": "e3ba15ca-7cbf-4c1a-9c8b-9820e4b1df6a",
                "parentUUID": "76881cba-e8a7-4cfb-bc3c-4b32eeec7768",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1412,
            "rootEmpty": false
          },
          {
            "title": "#initializeTier",
            "suites": [
              {
                "title": "fallback",
                "suites": [],
                "tests": [
                  {
                    "title": "throws when called",
                    "fullTitle": "#initializeTier fallback throws when called",
                    "timedOut": false,
                    "duration": 1149,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await shouldThrow(contribution.send, [tier1_params.minimum]);\n        await shouldThrow(tier1_deployed.send, [tier1_params.minimum]);\n        await shouldThrow(cnd.send, [tier1_params.minimum]);\n        const totalInvested = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvested, 0);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "89c60f9b-26de-495c-b296-68f5564b96b8",
                    "parentUUID": "a5a090a2-1610-42ba-a294-deded7312b7a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 300000,
                "file": "/test/contribution_test.js",
                "uuid": "a5a090a2-1610-42ba-a294-deded7312b7a",
                "beforeHooks": [],
                "afterHooks": [],
                "fullFile": "/Users/rstorm/repos/playFUckingGround/123/test/contribution_test.js",
                "passes": [
                  {
                    "title": "throws when called",
                    "fullTitle": "#initializeTier fallback throws when called",
                    "timedOut": false,
                    "duration": 1149,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await shouldThrow(contribution.send, [tier1_params.minimum]);\n        await shouldThrow(tier1_deployed.send, [tier1_params.minimum]);\n        await shouldThrow(cnd.send, [tier1_params.minimum]);\n        const totalInvested = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvested, 0);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "89c60f9b-26de-495c-b296-68f5564b96b8",
                    "parentUUID": "a5a090a2-1610-42ba-a294-deded7312b7a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasBeforeHooks": false,
                "hasAfterHooks": false,
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1149,
                "rootEmpty": false
              },
              {
                "title": "#proxyPayment",
                "suites": [],
                "tests": [
                  {
                    "title": "sends any amount after minimum was received",
                    "fullTitle": "#initializeTier #proxyPayment sends any amount after minimum was received",
                    "timedOut": false,
                    "duration": 260,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function (){\n        await contribution.buy({from: owner, value: tier1_params.minimum});\n        await contribution.buy({from: owner, value: 1});\n        const expectedBalance = tier1_params.minimum.add(1).mul(tier1_params.exchangeRate).toString();\n        const balanceAfter = await cnd.balanceOf(owner);;\n        assert.equal(balanceAfter.toString(), expectedBalance);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0ab8071a-404b-4f2d-a4ec-ad13d2e93723",
                    "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "sends any amount after minimum was received",
                    "fullTitle": "#initializeTier #proxyPayment sends any amount after minimum was received",
                    "timedOut": false,
                    "duration": 262,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function (){\n        await contribution.buy({from: owner, value: tier1_params.maxInvestorCap.sub(1)});\n        await contribution.buy({from: owner, value: tier1_params.maxInvestorCap});\n        const balanceAfter = await cnd.balanceOf(owner);\n        const expectedBalance = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate).toString();\n        assert.equal(balanceAfter.toString(), expectedBalance);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2c17a72b-59b2-4a3d-9d61-ab650703f016",
                    "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "allows to buy 1 whiteslited investor",
                    "fullTitle": "#initializeTier #proxyPayment allows to buy 1 whiteslited investor",
                    "timedOut": false,
                    "duration": 1981,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        const pre = await web3.eth.getBalance(owner);\n        const weiToSend = tier1_params.minimum.mul(2);\n        const contWallBalanceBefore = await web3.eth.getBalance(contributionWallet);\n        const txReceipt = await contribution.buy({ from: owner, value: weiToSend });\n        const post = await web3.eth.getBalance(owner);\n        const postCon = await web3.eth.getBalance(contributionWallet);\n        assert(post.toNumber() < pre.toNumber(), 'post is more than pre');\n        const contWallBalanceAfter = await web3.eth.getBalance(contributionWallet);\n        assert.equal(contWallBalanceAfter.sub(contWallBalanceBefore).toNumber(), weiToSend.toNumber(), 'contributionWallet balance is not equal to weiToSend');\n        let totalNow = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalNow.toNumber(), weiToSend.toNumber(), 'totalWei is not equal to invested amount');\n        const totalSold = await contribution.totalTokensSold();\n        const userShouldReceiveTokens = weiToSend.mul(tier1_params.exchangeRate);\n        assert.equal(totalSold.toNumber(), userShouldReceiveTokens, 'totalSoldTokens is not equal to how much was sold');\n        let tokensLeft = await contribution.investorAmountTokensToBuy(owner);\n        assert.equal(tokensLeft.toNumber(), tier1_params.maxInvestorCap.sub(weiToSend).mul(tier1_params.exchangeRate));\n        const balance = await cnd.balanceOf(owner);\n        assert.equal(balance.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c80d081a-9dcf-442a-b8e3-e753ef040ca6",
                    "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "buys tokens on the amount available to buy and sends refund if it exceeds maxCapInvestor",
                    "fullTitle": "#initializeTier #proxyPayment buys tokens on the amount available to buy and sends refund if it exceeds maxCapInvestor",
                    "timedOut": false,
                    "duration": 1055,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        const weiToSend = tier1_params.minimum.mul(2);\n        const contWallBalanceBefore = await web3.eth.getBalance(contributionWallet);\n        const txReceipt = await contribution.proxyPayment(owner, { from: owner, value: weiToSend });\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        const totalNow = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalNow.toNumber(), tier1_params.maxInvestorCap.toNumber());\n        const tokensLeft = await contribution.investorAmountTokensToBuy(owner);\n        assert.equal(tokensLeft.toNumber(), 0);\n        const isCapReached = await contribution.isCurrentTierCapReached();\n        assert.equal(isCapReached, false, 'capTier should not be full');\n        const contWallBalanceAfter = await web3.eth.getBalance(contributionWallet);\n        assert.equal(contWallBalanceAfter.sub(contWallBalanceBefore).toNumber(), tier1_params.maxInvestorCap.toNumber(), 'contributionWallet balance is not equal to maxCap');\n        const totalSold = await contribution.totalTokensSold();\n        const userShouldReceiveTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate);\n        assert.equal(totalSold.toNumber(), userShouldReceiveTokens, 'totalSoldTokens is not equal to how much was sold');\n        const balance = await cnd.balanceOf(owner);\n        assert.equal(balance.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6d70c821-776b-467e-a4d1-1c38f4d80b19",
                    "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "allows to buy with multisig contract",
                    "fullTitle": "#initializeTier #proxyPayment allows to buy with multisig contract",
                    "timedOut": false,
                    "duration": 616,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        const multiSig = await MultiSigWallet.new([miner, owner], 1);\n        await web3.eth.sendTransaction({ from: miner, to: multiSig.address, value: tier1_params.maxInvestorCap.mul(2) });\n        await contribution.whitelistAddresses([multiSig.address], 0, true);\n        const encodedProxyPaymentCall = contribution.contract.proxyPayment.getData(contribution.address);\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        assert.equal(0, totalInvestedBefore.toNumber());\n        await multiSig.submitTransaction(contribution.address, tier1_params.maxInvestorCap, encodedProxyPaymentCall);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), tier1_params.maxInvestorCap.toNumber(), 'totalInvested is not equal to MaxCap');\n        const balanceOf = await cnd.balanceOf(multiSig.address);\n        assert.equal(balanceOf.toNumber(), tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate).toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "240e447a-97df-4f0c-b992-898c816629e1",
                    "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if maxCapInvestor is reached",
                    "fullTitle": "#initializeTier #proxyPayment throws if maxCapInvestor is reached",
                    "timedOut": false,
                    "duration": 480,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [owner, { from: owner, value: 1 }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b47274d0-5e08-401d-9587-9cbe08ab910a",
                    "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if tier cap is reached",
                    "fullTitle": "#initializeTier #proxyPayment throws if tier cap is reached",
                    "timedOut": false,
                    "duration": 608,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.whitelistAddresses([advisorsWallet], 0, true);\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum });\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6d9a996a-51ec-4d96-ad6e-e3e5bd433c79",
                    "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if not whitelisted",
                    "fullTitle": "#initializeTier #proxyPayment throws if not whitelisted",
                    "timedOut": false,
                    "duration": 403,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3804d24c-cccc-49f2-98e5-03f85fe4d280",
                    "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if endTime is passed",
                    "fullTitle": "#initializeTier #proxyPayment throws if endTime is passed",
                    "timedOut": false,
                    "duration": 395,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.setBlockTimestamp(tier1_params.endTime + 1);\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [owner, { from: owner, value: tier1_params.maxInvestorCap }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2150fbd3-3594-4401-9f41-40c496c8eb64",
                    "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "reach totalCap happy path",
                    "fullTitle": "#initializeTier #proxyPayment reach totalCap happy path",
                    "timedOut": false,
                    "duration": 444,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.whitelistAddresses([advisorsWallet], 0, true);\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.maxInvestorCap });\n        let totalNow = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalNow.toNumber(), tier1_params.totalCap.toNumber());\n        let tokensLeftOwner = await contribution.investorAmountTokensToBuy(owner);\n        assert.equal(tokensLeftOwner.toNumber(), 0);\n        let tokensLeftAdvisor = await contribution.investorAmountTokensToBuy(advisorsWallet);\n        // tier cap is 2 eth, we should only process 0.5 eth, so 1 eth * exchangeRate = 3 * 10**18 tokens\n        assert.equal(tokensLeftAdvisor.toNumber(), new BigNumber(10 ** 18 * 3));\n        const isCapReached = await contribution.isCurrentTierCapReached();\n        assert.equal(isCapReached, true);\n        const totalSold = await contribution.totalTokensSold();\n        assert.equal(totalSold, tier1_params.totalCap.mul(tier1_params.exchangeRate).toNumber());\n        const investedWei = await tier1_deployed.totalInvestedWei();\n        assert.equal(investedWei.toNumber(), tier1_params.totalCap.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "34acc0b5-4610-4958-8940-1455e973422f",
                    "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 300000,
                "file": "/test/contribution_test.js",
                "uuid": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "#initializeTier #proxyPayment \"before each\" hook",
                    "timedOut": false,
                    "duration": 140,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.initializeToken(cnd.address);\n        await contribution.initializeTier(\n          0, tier1_deployed.address\n        );\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        await contribution.whitelistAddresses([owner], 0, true);\n        const isWhitelisted = await contribution.isWhitelisted(owner, 0);\n        assert.equal(isWhitelisted, true, 'whitelisting did not go thru');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2414df6d-102f-446e-93b5-be880eb46ec5",
                    "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "fullFile": "/Users/rstorm/repos/playFUckingGround/123/test/contribution_test.js",
                "passes": [
                  {
                    "title": "sends any amount after minimum was received",
                    "fullTitle": "#initializeTier #proxyPayment sends any amount after minimum was received",
                    "timedOut": false,
                    "duration": 260,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function (){\n        await contribution.buy({from: owner, value: tier1_params.minimum});\n        await contribution.buy({from: owner, value: 1});\n        const expectedBalance = tier1_params.minimum.add(1).mul(tier1_params.exchangeRate).toString();\n        const balanceAfter = await cnd.balanceOf(owner);;\n        assert.equal(balanceAfter.toString(), expectedBalance);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0ab8071a-404b-4f2d-a4ec-ad13d2e93723",
                    "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "sends any amount after minimum was received",
                    "fullTitle": "#initializeTier #proxyPayment sends any amount after minimum was received",
                    "timedOut": false,
                    "duration": 262,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function (){\n        await contribution.buy({from: owner, value: tier1_params.maxInvestorCap.sub(1)});\n        await contribution.buy({from: owner, value: tier1_params.maxInvestorCap});\n        const balanceAfter = await cnd.balanceOf(owner);\n        const expectedBalance = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate).toString();\n        assert.equal(balanceAfter.toString(), expectedBalance);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2c17a72b-59b2-4a3d-9d61-ab650703f016",
                    "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "allows to buy 1 whiteslited investor",
                    "fullTitle": "#initializeTier #proxyPayment allows to buy 1 whiteslited investor",
                    "timedOut": false,
                    "duration": 1981,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        const pre = await web3.eth.getBalance(owner);\n        const weiToSend = tier1_params.minimum.mul(2);\n        const contWallBalanceBefore = await web3.eth.getBalance(contributionWallet);\n        const txReceipt = await contribution.buy({ from: owner, value: weiToSend });\n        const post = await web3.eth.getBalance(owner);\n        const postCon = await web3.eth.getBalance(contributionWallet);\n        assert(post.toNumber() < pre.toNumber(), 'post is more than pre');\n        const contWallBalanceAfter = await web3.eth.getBalance(contributionWallet);\n        assert.equal(contWallBalanceAfter.sub(contWallBalanceBefore).toNumber(), weiToSend.toNumber(), 'contributionWallet balance is not equal to weiToSend');\n        let totalNow = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalNow.toNumber(), weiToSend.toNumber(), 'totalWei is not equal to invested amount');\n        const totalSold = await contribution.totalTokensSold();\n        const userShouldReceiveTokens = weiToSend.mul(tier1_params.exchangeRate);\n        assert.equal(totalSold.toNumber(), userShouldReceiveTokens, 'totalSoldTokens is not equal to how much was sold');\n        let tokensLeft = await contribution.investorAmountTokensToBuy(owner);\n        assert.equal(tokensLeft.toNumber(), tier1_params.maxInvestorCap.sub(weiToSend).mul(tier1_params.exchangeRate));\n        const balance = await cnd.balanceOf(owner);\n        assert.equal(balance.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c80d081a-9dcf-442a-b8e3-e753ef040ca6",
                    "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "buys tokens on the amount available to buy and sends refund if it exceeds maxCapInvestor",
                    "fullTitle": "#initializeTier #proxyPayment buys tokens on the amount available to buy and sends refund if it exceeds maxCapInvestor",
                    "timedOut": false,
                    "duration": 1055,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        const weiToSend = tier1_params.minimum.mul(2);\n        const contWallBalanceBefore = await web3.eth.getBalance(contributionWallet);\n        const txReceipt = await contribution.proxyPayment(owner, { from: owner, value: weiToSend });\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        const totalNow = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalNow.toNumber(), tier1_params.maxInvestorCap.toNumber());\n        const tokensLeft = await contribution.investorAmountTokensToBuy(owner);\n        assert.equal(tokensLeft.toNumber(), 0);\n        const isCapReached = await contribution.isCurrentTierCapReached();\n        assert.equal(isCapReached, false, 'capTier should not be full');\n        const contWallBalanceAfter = await web3.eth.getBalance(contributionWallet);\n        assert.equal(contWallBalanceAfter.sub(contWallBalanceBefore).toNumber(), tier1_params.maxInvestorCap.toNumber(), 'contributionWallet balance is not equal to maxCap');\n        const totalSold = await contribution.totalTokensSold();\n        const userShouldReceiveTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate);\n        assert.equal(totalSold.toNumber(), userShouldReceiveTokens, 'totalSoldTokens is not equal to how much was sold');\n        const balance = await cnd.balanceOf(owner);\n        assert.equal(balance.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6d70c821-776b-467e-a4d1-1c38f4d80b19",
                    "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "allows to buy with multisig contract",
                    "fullTitle": "#initializeTier #proxyPayment allows to buy with multisig contract",
                    "timedOut": false,
                    "duration": 616,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        const multiSig = await MultiSigWallet.new([miner, owner], 1);\n        await web3.eth.sendTransaction({ from: miner, to: multiSig.address, value: tier1_params.maxInvestorCap.mul(2) });\n        await contribution.whitelistAddresses([multiSig.address], 0, true);\n        const encodedProxyPaymentCall = contribution.contract.proxyPayment.getData(contribution.address);\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        assert.equal(0, totalInvestedBefore.toNumber());\n        await multiSig.submitTransaction(contribution.address, tier1_params.maxInvestorCap, encodedProxyPaymentCall);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), tier1_params.maxInvestorCap.toNumber(), 'totalInvested is not equal to MaxCap');\n        const balanceOf = await cnd.balanceOf(multiSig.address);\n        assert.equal(balanceOf.toNumber(), tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate).toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "240e447a-97df-4f0c-b992-898c816629e1",
                    "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if maxCapInvestor is reached",
                    "fullTitle": "#initializeTier #proxyPayment throws if maxCapInvestor is reached",
                    "timedOut": false,
                    "duration": 480,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [owner, { from: owner, value: 1 }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b47274d0-5e08-401d-9587-9cbe08ab910a",
                    "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if tier cap is reached",
                    "fullTitle": "#initializeTier #proxyPayment throws if tier cap is reached",
                    "timedOut": false,
                    "duration": 608,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.whitelistAddresses([advisorsWallet], 0, true);\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum });\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6d9a996a-51ec-4d96-ad6e-e3e5bd433c79",
                    "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if not whitelisted",
                    "fullTitle": "#initializeTier #proxyPayment throws if not whitelisted",
                    "timedOut": false,
                    "duration": 403,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3804d24c-cccc-49f2-98e5-03f85fe4d280",
                    "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if endTime is passed",
                    "fullTitle": "#initializeTier #proxyPayment throws if endTime is passed",
                    "timedOut": false,
                    "duration": 395,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.setBlockTimestamp(tier1_params.endTime + 1);\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [owner, { from: owner, value: tier1_params.maxInvestorCap }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2150fbd3-3594-4401-9f41-40c496c8eb64",
                    "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "reach totalCap happy path",
                    "fullTitle": "#initializeTier #proxyPayment reach totalCap happy path",
                    "timedOut": false,
                    "duration": 444,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.whitelistAddresses([advisorsWallet], 0, true);\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.maxInvestorCap });\n        let totalNow = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalNow.toNumber(), tier1_params.totalCap.toNumber());\n        let tokensLeftOwner = await contribution.investorAmountTokensToBuy(owner);\n        assert.equal(tokensLeftOwner.toNumber(), 0);\n        let tokensLeftAdvisor = await contribution.investorAmountTokensToBuy(advisorsWallet);\n        // tier cap is 2 eth, we should only process 0.5 eth, so 1 eth * exchangeRate = 3 * 10**18 tokens\n        assert.equal(tokensLeftAdvisor.toNumber(), new BigNumber(10 ** 18 * 3));\n        const isCapReached = await contribution.isCurrentTierCapReached();\n        assert.equal(isCapReached, true);\n        const totalSold = await contribution.totalTokensSold();\n        assert.equal(totalSold, tier1_params.totalCap.mul(tier1_params.exchangeRate).toNumber());\n        const investedWei = await tier1_deployed.totalInvestedWei();\n        assert.equal(investedWei.toNumber(), tier1_params.totalCap.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "34acc0b5-4610-4958-8940-1455e973422f",
                    "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasBeforeHooks": true,
                "hasAfterHooks": false,
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 10,
                "totalPasses": 10,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 6504,
                "rootEmpty": false
              },
              {
                "title": "#finalize",
                "suites": [],
                "tests": [
                  {
                    "title": "increases tierCount",
                    "fullTitle": "#initializeTier #finalize increases tierCount",
                    "timedOut": false,
                    "duration": 89,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        let tierCount = await contribution.tierCount();\n        assert.equal(tierCount.toNumber(), 0);\n        await contribution.finalize();\n        tierCount = await contribution.tierCount();\n        assert.equal(tierCount.toNumber(), 1);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cc4e3ccd-09b6-48fd-a15c-a666105bb1b8",
                    "parentUUID": "444dbcca-3a5c-4250-9820-ed8d55e43542",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws when you call finalize on non-existed tier",
                    "fullTitle": "#initializeTier #finalize throws when you call finalize on non-existed tier",
                    "timedOut": false,
                    "duration": 425,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.finalize();\n        const tierCountBefore = await contribution.tierCount();\n        await shouldThrow(contribution.finalize,[]);\n        const tierCountAfter = await contribution.tierCount();\n        assert.equal(tierCountBefore.toNumber(), tierCountAfter.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "287c3a82-43b2-466a-97cc-ab0e13d8bf12",
                    "parentUUID": "444dbcca-3a5c-4250-9820-ed8d55e43542",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 300000,
                "file": "/test/contribution_test.js",
                "uuid": "444dbcca-3a5c-4250-9820-ed8d55e43542",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "#initializeTier #finalize \"before each\" hook",
                    "timedOut": false,
                    "duration": 145,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.initializeToken(cnd.address);\n        await contribution.initializeTier(\n          0, tier1_deployed.address\n        );\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        await contribution.whitelistAddresses([owner], 0, true);\n        const isWhitelisted = await contribution.isWhitelisted(owner, 0);\n        assert.equal(isWhitelisted, true, 'whitelisting did not go thru');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ebc46bea-7cae-4513-918a-74accc502731",
                    "parentUUID": "444dbcca-3a5c-4250-9820-ed8d55e43542",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "fullFile": "/Users/rstorm/repos/playFUckingGround/123/test/contribution_test.js",
                "passes": [
                  {
                    "title": "increases tierCount",
                    "fullTitle": "#initializeTier #finalize increases tierCount",
                    "timedOut": false,
                    "duration": 89,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        let tierCount = await contribution.tierCount();\n        assert.equal(tierCount.toNumber(), 0);\n        await contribution.finalize();\n        tierCount = await contribution.tierCount();\n        assert.equal(tierCount.toNumber(), 1);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cc4e3ccd-09b6-48fd-a15c-a666105bb1b8",
                    "parentUUID": "444dbcca-3a5c-4250-9820-ed8d55e43542",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws when you call finalize on non-existed tier",
                    "fullTitle": "#initializeTier #finalize throws when you call finalize on non-existed tier",
                    "timedOut": false,
                    "duration": 425,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.finalize();\n        const tierCountBefore = await contribution.tierCount();\n        await shouldThrow(contribution.finalize,[]);\n        const tierCountAfter = await contribution.tierCount();\n        assert.equal(tierCountBefore.toNumber(), tierCountAfter.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "287c3a82-43b2-466a-97cc-ab0e13d8bf12",
                    "parentUUID": "444dbcca-3a5c-4250-9820-ed8d55e43542",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasBeforeHooks": true,
                "hasAfterHooks": false,
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 514,
                "rootEmpty": false
              },
              {
                "title": "#pauseContribution",
                "suites": [],
                "tests": [
                  {
                    "title": "sets paused",
                    "fullTitle": "#initializeTier #pauseContribution sets paused",
                    "timedOut": false,
                    "duration": 81,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        let paused = await contribution.paused();\n        assert.equal(paused, false);\n        await contribution.pauseContribution(true);\n        paused = await contribution.paused();\n        assert.equal(paused, true);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "050440f7-b3cf-4120-b025-0c21c6e0f886",
                    "parentUUID": "00a43828-65a2-4229-9a98-85cbfb7c48ba",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws when you proxyBuy with paused state",
                    "fullTitle": "#initializeTier #pauseContribution throws when you proxyBuy with paused state",
                    "timedOut": false,
                    "duration": 471,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.pauseContribution(true);\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        await contribution.whitelistAddresses([owner], 0, true);\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [owner, { from: owner, value: tier1_params.maxInvestorCap }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bda4bc75-b5e4-4bc5-bf86-6e0fe036063a",
                    "parentUUID": "00a43828-65a2-4229-9a98-85cbfb7c48ba",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if non-owner calls it",
                    "fullTitle": "#initializeTier #pauseContribution throws if non-owner calls it",
                    "timedOut": false,
                    "duration": 404,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        const before = await contribution.paused();\n        await shouldThrow(contribution.pauseContribution, [true, { from: advisorsWallet }]);\n        const after = await contribution.paused();\n        assert.equal(before, after);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "287fd26e-734b-48b0-a0b7-100869e63d51",
                    "parentUUID": "00a43828-65a2-4229-9a98-85cbfb7c48ba",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 300000,
                "file": "/test/contribution_test.js",
                "uuid": "00a43828-65a2-4229-9a98-85cbfb7c48ba",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "#initializeTier #pauseContribution \"before each\" hook",
                    "timedOut": false,
                    "duration": 55,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "async function (){\n        await contribution.initializeToken(cnd.address);\n        await contribution.initializeTier(\n          0, tier1_deployed.address\n        );",
                    "err": {},
                    "isRoot": false,
                    "uuid": "84a8ed42-dc7b-4d1a-aba7-9f969539220e",
                    "parentUUID": "00a43828-65a2-4229-9a98-85cbfb7c48ba",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "fullFile": "/Users/rstorm/repos/playFUckingGround/123/test/contribution_test.js",
                "passes": [
                  {
                    "title": "sets paused",
                    "fullTitle": "#initializeTier #pauseContribution sets paused",
                    "timedOut": false,
                    "duration": 81,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        let paused = await contribution.paused();\n        assert.equal(paused, false);\n        await contribution.pauseContribution(true);\n        paused = await contribution.paused();\n        assert.equal(paused, true);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "050440f7-b3cf-4120-b025-0c21c6e0f886",
                    "parentUUID": "00a43828-65a2-4229-9a98-85cbfb7c48ba",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws when you proxyBuy with paused state",
                    "fullTitle": "#initializeTier #pauseContribution throws when you proxyBuy with paused state",
                    "timedOut": false,
                    "duration": 471,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.pauseContribution(true);\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        await contribution.whitelistAddresses([owner], 0, true);\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [owner, { from: owner, value: tier1_params.maxInvestorCap }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bda4bc75-b5e4-4bc5-bf86-6e0fe036063a",
                    "parentUUID": "00a43828-65a2-4229-9a98-85cbfb7c48ba",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if non-owner calls it",
                    "fullTitle": "#initializeTier #pauseContribution throws if non-owner calls it",
                    "timedOut": false,
                    "duration": 404,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        const before = await contribution.paused();\n        await shouldThrow(contribution.pauseContribution, [true, { from: advisorsWallet }]);\n        const after = await contribution.paused();\n        assert.equal(before, after);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "287fd26e-734b-48b0-a0b7-100869e63d51",
                    "parentUUID": "00a43828-65a2-4229-9a98-85cbfb7c48ba",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasBeforeHooks": true,
                "hasAfterHooks": false,
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 956,
                "rootEmpty": false
              },
              {
                "title": "#allocate",
                "suites": [],
                "tests": [
                  {
                    "title": "happy path",
                    "fullTitle": "#initializeTier #allocate happy path",
                    "timedOut": false,
                    "duration": 3306,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        const should = require('chai')\n          .use(require('chai-as-promised'))\n          .use(require('chai-bignumber')(BigNumber))\n          .should()\n        await deployThreeTiers(contribution.address);\n        await contribution.initializeToken(cnd.address);\n        await contribution.initializeTier(\n          0, tier1_deployed.address\n        );\n        await contribution.initializeTier(\n          1, tier2_deployed.address\n        );\n        await contribution.initializeTier(\n          2, tier3_deployed.address\n        );\n        await contribution.initializeTier(\n          3, tier4_deployed.address\n        );\n        await contribution.setBlockTimestamp(tier4_params.startTime);\n        await contribution.whitelistAddresses([owner], 0, true);\n        await contribution.finalize();\n        await contribution.finalize();\n        await contribution.finalize();\n        await contribution.proxyPayment(owner, { from: owner, value: tier4_params.maxInvestorCap });\n        const totalTokenSold = await contribution.totalTokensSold();\n        const totalSupply = totalTokenSold.mul(100).div(75);\n        const foundersAmount = totalSupply.div(5);\n        const advisorsAmount = totalSupply.mul(38).div(1000);\n        const bountyAmount = totalSupply.mul(12).div(1000);\n        await contribution.finalize();\n        //will be succesful\n        await contribution.allocate();\n        // will be rejected\n        await shouldThrow(contribution.allocate,[]);\n        const balanceFounders = await cnd.balanceOf(foundersWallet);\n        const balanceAdvisors = await cnd.balanceOf(advisorsWallet);\n        const balanceBounty = await cnd.balanceOf(bountyWallet);\n        foundersAmount.should.be.bignumber.equal(balanceFounders, 0, BigNumber.ROUND_DOWN, 'balanceFounders failed');\n        advisorsAmount.should.be.bignumber.equal(advisorsAmount, 0, BigNumber.ROUND_DOWN, 'balanceAdvisors failed');\n        bountyAmount.should.be.bignumber.equal(balanceBounty, 0, BigNumber.ROUND_DOWN, 'balanceBounty failed');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c7b27562-ad3d-4af1-be34-de665f110d91",
                    "parentUUID": "ec535d0d-f543-4281-a382-2cc1794a3494",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 300000,
                "file": "/test/contribution_test.js",
                "uuid": "ec535d0d-f543-4281-a382-2cc1794a3494",
                "beforeHooks": [],
                "afterHooks": [],
                "fullFile": "/Users/rstorm/repos/playFUckingGround/123/test/contribution_test.js",
                "passes": [
                  {
                    "title": "happy path",
                    "fullTitle": "#initializeTier #allocate happy path",
                    "timedOut": false,
                    "duration": 3306,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        const should = require('chai')\n          .use(require('chai-as-promised'))\n          .use(require('chai-bignumber')(BigNumber))\n          .should()\n        await deployThreeTiers(contribution.address);\n        await contribution.initializeToken(cnd.address);\n        await contribution.initializeTier(\n          0, tier1_deployed.address\n        );\n        await contribution.initializeTier(\n          1, tier2_deployed.address\n        );\n        await contribution.initializeTier(\n          2, tier3_deployed.address\n        );\n        await contribution.initializeTier(\n          3, tier4_deployed.address\n        );\n        await contribution.setBlockTimestamp(tier4_params.startTime);\n        await contribution.whitelistAddresses([owner], 0, true);\n        await contribution.finalize();\n        await contribution.finalize();\n        await contribution.finalize();\n        await contribution.proxyPayment(owner, { from: owner, value: tier4_params.maxInvestorCap });\n        const totalTokenSold = await contribution.totalTokensSold();\n        const totalSupply = totalTokenSold.mul(100).div(75);\n        const foundersAmount = totalSupply.div(5);\n        const advisorsAmount = totalSupply.mul(38).div(1000);\n        const bountyAmount = totalSupply.mul(12).div(1000);\n        await contribution.finalize();\n        //will be succesful\n        await contribution.allocate();\n        // will be rejected\n        await shouldThrow(contribution.allocate,[]);\n        const balanceFounders = await cnd.balanceOf(foundersWallet);\n        const balanceAdvisors = await cnd.balanceOf(advisorsWallet);\n        const balanceBounty = await cnd.balanceOf(bountyWallet);\n        foundersAmount.should.be.bignumber.equal(balanceFounders, 0, BigNumber.ROUND_DOWN, 'balanceFounders failed');\n        advisorsAmount.should.be.bignumber.equal(advisorsAmount, 0, BigNumber.ROUND_DOWN, 'balanceAdvisors failed');\n        bountyAmount.should.be.bignumber.equal(balanceBounty, 0, BigNumber.ROUND_DOWN, 'balanceBounty failed');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c7b27562-ad3d-4af1-be34-de665f110d91",
                    "parentUUID": "ec535d0d-f543-4281-a382-2cc1794a3494",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasBeforeHooks": false,
                "hasAfterHooks": false,
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 3306,
                "rootEmpty": false
              },
              {
                "title": "#allowTransfers",
                "suites": [],
                "tests": [
                  {
                    "title": "sets transferrable",
                    "fullTitle": "#initializeTier #allowTransfers sets transferrable",
                    "timedOut": false,
                    "duration": 281,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        let transferable = await contribution.transferable();\n        assert.equal(transferable, false);\n        await contribution.allowTransfers(true);\n        transferable = await contribution.transferable();\n        assert.equal(transferable, true);\n        let balanceMiner = await cnd.balanceOf(miner);\n        const userShouldReceiveTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate);\n        assert.equal(balanceMiner.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');\n        await cnd.transfer(foundersWallet, userShouldReceiveTokens, { from: miner });\n        const balanceFounder = await cnd.balanceOf(foundersWallet);\n        assert.equal(balanceFounder.toNumber(), userShouldReceiveTokens.toNumber(), 'founderwallet did not receive tokens');\n        balanceMiner = await cnd.balanceOf(miner);\n        assert.equal(balanceMiner.toNumber(), 0);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f3684f63-2760-45ed-8acc-de8b46b99124",
                    "parentUUID": "57ac30c8-dff6-45c3-a0b0-35ec1b481de4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "always allows to transfer after October 12",
                    "fullTitle": "#initializeTier #allowTransfers always allows to transfer after October 12",
                    "timedOut": false,
                    "duration": 659,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        let transferable = await contribution.transferable();\n        assert.equal(transferable, false, 'transferable is true');\n        const balanceBeforeMiner = await cnd.balanceOf(miner);\n        await shouldThrow(cnd.transfer, [foundersWallet, tier1_params.maxInvestorCap, {from: miner}]);\n        let balanceAfterMiner = await cnd.balanceOf(miner);\n        assert.equal(balanceAfterMiner.toNumber(), balanceBeforeMiner.toNumber());\n        const numberOfTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate).toNumber();\n        assert.equal(balanceBeforeMiner.toNumber(), numberOfTokens);\n        const October12_2017_JS = new Date('October 12 2017 14:00:00').getTime()/1000;\n        await contribution.setBlockTimestamp(October12_2017_JS);\n        const contract_oct12 = await contribution.October12_2017();\n        assert(October12_2017_JS >= contract_oct12.toNumber());\n        await cnd.transfer(foundersWallet, numberOfTokens, {from: miner});\n        balanceAfterMiner = await cnd.balanceOf(miner);\n        assert.equal(balanceAfterMiner.toNumber(), 0);\n        const balanceFounder = await cnd.balanceOf(foundersWallet);\n        assert.equal(balanceFounder.toNumber(), balanceBeforeMiner.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f0904ac5-b4e5-4bff-84d0-073319793aa1",
                    "parentUUID": "57ac30c8-dff6-45c3-a0b0-35ec1b481de4",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 300000,
                "file": "/test/contribution_test.js",
                "uuid": "57ac30c8-dff6-45c3-a0b0-35ec1b481de4",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "#initializeTier #allowTransfers \"before each\" hook",
                    "timedOut": false,
                    "duration": 178,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "async function (){\n        await contribution.initializeToken(cnd.address);\n        await contribution.initializeTier(\n          0, tier1_deployed.address\n        );\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        await contribution.whitelistAddresses([miner], 0, true);\n        await contribution.buy({ from: miner, value: tier1_params.maxInvestorCap });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "293cb171-38f2-4531-8835-deb99d2ec309",
                    "parentUUID": "57ac30c8-dff6-45c3-a0b0-35ec1b481de4",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "fullFile": "/Users/rstorm/repos/playFUckingGround/123/test/contribution_test.js",
                "passes": [
                  {
                    "title": "sets transferrable",
                    "fullTitle": "#initializeTier #allowTransfers sets transferrable",
                    "timedOut": false,
                    "duration": 281,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        let transferable = await contribution.transferable();\n        assert.equal(transferable, false);\n        await contribution.allowTransfers(true);\n        transferable = await contribution.transferable();\n        assert.equal(transferable, true);\n        let balanceMiner = await cnd.balanceOf(miner);\n        const userShouldReceiveTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate);\n        assert.equal(balanceMiner.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');\n        await cnd.transfer(foundersWallet, userShouldReceiveTokens, { from: miner });\n        const balanceFounder = await cnd.balanceOf(foundersWallet);\n        assert.equal(balanceFounder.toNumber(), userShouldReceiveTokens.toNumber(), 'founderwallet did not receive tokens');\n        balanceMiner = await cnd.balanceOf(miner);\n        assert.equal(balanceMiner.toNumber(), 0);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f3684f63-2760-45ed-8acc-de8b46b99124",
                    "parentUUID": "57ac30c8-dff6-45c3-a0b0-35ec1b481de4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "always allows to transfer after October 12",
                    "fullTitle": "#initializeTier #allowTransfers always allows to transfer after October 12",
                    "timedOut": false,
                    "duration": 659,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        let transferable = await contribution.transferable();\n        assert.equal(transferable, false, 'transferable is true');\n        const balanceBeforeMiner = await cnd.balanceOf(miner);\n        await shouldThrow(cnd.transfer, [foundersWallet, tier1_params.maxInvestorCap, {from: miner}]);\n        let balanceAfterMiner = await cnd.balanceOf(miner);\n        assert.equal(balanceAfterMiner.toNumber(), balanceBeforeMiner.toNumber());\n        const numberOfTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate).toNumber();\n        assert.equal(balanceBeforeMiner.toNumber(), numberOfTokens);\n        const October12_2017_JS = new Date('October 12 2017 14:00:00').getTime()/1000;\n        await contribution.setBlockTimestamp(October12_2017_JS);\n        const contract_oct12 = await contribution.October12_2017();\n        assert(October12_2017_JS >= contract_oct12.toNumber());\n        await cnd.transfer(foundersWallet, numberOfTokens, {from: miner});\n        balanceAfterMiner = await cnd.balanceOf(miner);\n        assert.equal(balanceAfterMiner.toNumber(), 0);\n        const balanceFounder = await cnd.balanceOf(foundersWallet);\n        assert.equal(balanceFounder.toNumber(), balanceBeforeMiner.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f0904ac5-b4e5-4bff-84d0-073319793aa1",
                    "parentUUID": "57ac30c8-dff6-45c3-a0b0-35ec1b481de4",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasBeforeHooks": true,
                "hasAfterHooks": false,
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 940,
                "rootEmpty": false
              },
              {
                "title": "#contributionOpen",
                "suites": [],
                "tests": [
                  {
                    "title": "happy path - returns true",
                    "fullTitle": "#initializeTier #contributionOpen happy path - returns true",
                    "timedOut": false,
                    "duration": 128,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        let contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, true);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2baf19a5-08f3-4411-889f-5c17b782ab9b",
                    "parentUUID": "d27ee7d6-0e02-43b8-8b0e-6a44cd4567ec",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "returns false when endTime passed",
                    "fullTitle": "#initializeTier #contributionOpen returns false when endTime passed",
                    "timedOut": false,
                    "duration": 132,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        let contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);\n        await contribution.setBlockTimestamp(tier1_params.endTime + 1);\n        contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "861f60d4-bcf5-4782-bda4-ae466068f83d",
                    "parentUUID": "d27ee7d6-0e02-43b8-8b0e-6a44cd4567ec",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "returns false when finalized was called",
                    "fullTitle": "#initializeTier #contributionOpen returns false when finalized was called",
                    "timedOut": false,
                    "duration": 300,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        await contribution.whitelistAddresses([owner, advisorsWallet], 0, true);\n        await contribution.buy({ from: owner, value: tier1_params.maxInvestorCap });\n        await contribution.buy({ from: advisorsWallet, value: tier1_params.maxInvestorCap });\n        const finalizedTime = await tier1_deployed.finalizedTime();\n        assert(finalizedTime.toNumber() > 0);\n        contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6127a312-f0b8-4396-b460-968327d8e252",
                    "parentUUID": "d27ee7d6-0e02-43b8-8b0e-6a44cd4567ec",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 300000,
                "file": "/test/contribution_test.js",
                "uuid": "d27ee7d6-0e02-43b8-8b0e-6a44cd4567ec",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "#initializeTier #contributionOpen \"before each\" hook",
                    "timedOut": false,
                    "duration": 60,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "async function (){\n        await contribution.initializeToken(cnd.address);\n        await contribution.initializeTier(\n          0, tier1_deployed.address\n        );",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4c7b9799-c1e4-4972-bbfd-01bbdbdc4e7a",
                    "parentUUID": "d27ee7d6-0e02-43b8-8b0e-6a44cd4567ec",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "fullFile": "/Users/rstorm/repos/playFUckingGround/123/test/contribution_test.js",
                "passes": [
                  {
                    "title": "happy path - returns true",
                    "fullTitle": "#initializeTier #contributionOpen happy path - returns true",
                    "timedOut": false,
                    "duration": 128,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        let contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, true);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2baf19a5-08f3-4411-889f-5c17b782ab9b",
                    "parentUUID": "d27ee7d6-0e02-43b8-8b0e-6a44cd4567ec",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "returns false when endTime passed",
                    "fullTitle": "#initializeTier #contributionOpen returns false when endTime passed",
                    "timedOut": false,
                    "duration": 132,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        let contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);\n        await contribution.setBlockTimestamp(tier1_params.endTime + 1);\n        contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "861f60d4-bcf5-4782-bda4-ae466068f83d",
                    "parentUUID": "d27ee7d6-0e02-43b8-8b0e-6a44cd4567ec",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "returns false when finalized was called",
                    "fullTitle": "#initializeTier #contributionOpen returns false when finalized was called",
                    "timedOut": false,
                    "duration": 300,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        await contribution.whitelistAddresses([owner, advisorsWallet], 0, true);\n        await contribution.buy({ from: owner, value: tier1_params.maxInvestorCap });\n        await contribution.buy({ from: advisorsWallet, value: tier1_params.maxInvestorCap });\n        const finalizedTime = await tier1_deployed.finalizedTime();\n        assert(finalizedTime.toNumber() > 0);\n        contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6127a312-f0b8-4396-b460-968327d8e252",
                    "parentUUID": "d27ee7d6-0e02-43b8-8b0e-6a44cd4567ec",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasBeforeHooks": true,
                "hasAfterHooks": false,
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 560,
                "rootEmpty": false
              }
            ],
            "tests": [
              {
                "title": "can intialize 4 tiers",
                "fullTitle": "Contract: Contribution #initializeTier can intialize 4 tiers",
                "timedOut": false,
                "duration": 2498,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      await contribution.initializeToken(cnd.address);\n      await deployThreeTiers(contribution.address);\n      await contribution.initializeTier(\n        0, tier1_deployed.address\n      );\n      await contribution.initializeTier(\n        1, tier2_deployed.address\n      );\n      await contribution.initializeTier(\n        2, tier3_deployed.address\n      );\n      await contribution.initializeTier(\n        3, tier4_deployed.address\n      );\n      const tier1_from_contribution_array = await contribution.tiers(0);\n      assert.equal(tier1_from_contribution_array, tier1_deployed.address, \"Contribution can't save tier\");\n      const tier2_from_contribution_array = await contribution.tiers(1);\n      assert.equal(tier2_from_contribution_array, tier2_deployed.address, \"Contribution can't save tier\");\n      const tier3_from_contribution_array = await contribution.tiers(2);\n      assert.equal(tier3_from_contribution_array, tier3_deployed.address, \"Contribution can't save tier\");\n      const tier4_from_contribution_array = await contribution.tiers(3);\n      assert.equal(tier4_from_contribution_array, tier4_deployed.address, \"Contribution can't save tier\");",
                "err": {},
                "isRoot": false,
                "uuid": "7ca44278-26ee-4514-8f7b-115fd5e78ac6",
                "parentUUID": "3c57cdf4-8b39-45cb-9e4a-078d27b14d71",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when you try to initialize tier without token initialization",
                "fullTitle": "Contract: Contribution #initializeTier throws when you try to initialize tier without token initialization",
                "timedOut": false,
                "duration": 371,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      await shouldThrow(contribution.initializeTier, [0, tier1_deployed.address]);\n      const tier = await contribution.tiers(0);\n      assert.equal(tier, '0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "fb084bd0-0a90-4e61-8e15-ea2e43470163",
                "parentUUID": "3c57cdf4-8b39-45cb-9e4a-078d27b14d71",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when you try to overwrite tier",
                "fullTitle": "Contract: Contribution #initializeTier throws when you try to overwrite tier",
                "timedOut": false,
                "duration": 523,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      await contribution.initializeToken(cnd.address);\n      await contribution.initializeTier(\n        0, tier1_deployed.address\n      );\n      await shouldThrow(contribution.initializeTier, [0, '0x0039F22efB07A647557C7C5d17854CFD6D489eF3']);\n      const tier = await contribution.tiers(0);\n      assert.equal(tier, tier1_deployed.address);",
                "err": {},
                "isRoot": false,
                "uuid": "441df831-355d-44d4-81b3-5ac06c729a4e",
                "parentUUID": "3c57cdf4-8b39-45cb-9e4a-078d27b14d71",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when you try to initialize 5 tiers",
                "fullTitle": "Contract: Contribution #initializeTier throws when you try to initialize 5 tiers",
                "timedOut": false,
                "duration": 3105,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      await deployThreeTiers(contribution.address);\n      await contribution.initializeToken(cnd.address);\n      await contribution.initializeTier(\n        0, tier1_deployed.address\n      );\n      await contribution.initializeTier(\n        1, tier2_deployed.address\n      );\n      await contribution.initializeTier(\n        2, tier3_deployed.address\n      );\n      await contribution.initializeTier(\n        3, tier4_deployed.address\n      );\n      await shouldThrow(contribution.initializeTier, [4, tier1_deployed.address]);\n      await shouldThrow(contribution.tiers, [4]);",
                "err": {},
                "isRoot": false,
                "uuid": "37df096b-d7c6-4acb-b232-75ca92453d90",
                "parentUUID": "3c57cdf4-8b39-45cb-9e4a-078d27b14d71",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 300000,
            "file": "/test/contribution_test.js",
            "uuid": "3c57cdf4-8b39-45cb-9e4a-078d27b14d71",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Contribution #initializeTier \"before each\" hook",
                "timedOut": false,
                "duration": 1199,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      function unlockAccounts(password) {\n        for (var i = 0; i < web3.eth.accounts.length; i++) {\n          web3.personal.unlockAccount(`${web3.eth.accounts[i]}`, password, 100000);\n        }\n      }\n      const networkId = web3.version.network;\n      if (networkId !== '123' && networkId !== '321') {\n        unlockAccounts('testtest');\n      }\n      const tokenFactory = await MiniMeTokenFactory.new();\n      cnd = await CND.new(tokenFactory.address);\n      contribution = await Contribution.new(\n        contributionWallet,\n        foundersWallet,\n        advisorsWallet,\n        bountyWallet\n      );\n      await cnd.changeController(contribution.address);\n      tier1_params = {\n        totalCap: new BigNumber(10 ** 18 * 2),\n        minimum: new BigNumber(10 ** 18 * 0.5),\n        maxInvestorCap: new BigNumber(10 ** 18 * 1.5),\n        exchangeRate: 3,\n        startTime: latestTime() + duration.minutes(5),\n        endTime: latestTime() + duration.weeks(1),\n        contributionAddress: contribution.address\n      }\n      tier1_deployed = await Tier.new(tier1_params.totalCap, tier1_params.minimum, tier1_params.maxInvestorCap, tier1_params.exchangeRate, tier1_params.startTime, tier1_params.endTime);\n      await tier1_deployed.changeController(contribution.address);",
                "err": {},
                "isRoot": false,
                "uuid": "f0d73059-5691-4c76-b77f-bd50ffb12a01",
                "parentUUID": "3c57cdf4-8b39-45cb-9e4a-078d27b14d71",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "fullFile": "/Users/rstorm/repos/playFUckingGround/123/test/contribution_test.js",
            "passes": [
              {
                "title": "can intialize 4 tiers",
                "fullTitle": "Contract: Contribution #initializeTier can intialize 4 tiers",
                "timedOut": false,
                "duration": 2498,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      await contribution.initializeToken(cnd.address);\n      await deployThreeTiers(contribution.address);\n      await contribution.initializeTier(\n        0, tier1_deployed.address\n      );\n      await contribution.initializeTier(\n        1, tier2_deployed.address\n      );\n      await contribution.initializeTier(\n        2, tier3_deployed.address\n      );\n      await contribution.initializeTier(\n        3, tier4_deployed.address\n      );\n      const tier1_from_contribution_array = await contribution.tiers(0);\n      assert.equal(tier1_from_contribution_array, tier1_deployed.address, \"Contribution can't save tier\");\n      const tier2_from_contribution_array = await contribution.tiers(1);\n      assert.equal(tier2_from_contribution_array, tier2_deployed.address, \"Contribution can't save tier\");\n      const tier3_from_contribution_array = await contribution.tiers(2);\n      assert.equal(tier3_from_contribution_array, tier3_deployed.address, \"Contribution can't save tier\");\n      const tier4_from_contribution_array = await contribution.tiers(3);\n      assert.equal(tier4_from_contribution_array, tier4_deployed.address, \"Contribution can't save tier\");",
                "err": {},
                "isRoot": false,
                "uuid": "7ca44278-26ee-4514-8f7b-115fd5e78ac6",
                "parentUUID": "3c57cdf4-8b39-45cb-9e4a-078d27b14d71",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when you try to initialize tier without token initialization",
                "fullTitle": "Contract: Contribution #initializeTier throws when you try to initialize tier without token initialization",
                "timedOut": false,
                "duration": 371,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      await shouldThrow(contribution.initializeTier, [0, tier1_deployed.address]);\n      const tier = await contribution.tiers(0);\n      assert.equal(tier, '0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "fb084bd0-0a90-4e61-8e15-ea2e43470163",
                "parentUUID": "3c57cdf4-8b39-45cb-9e4a-078d27b14d71",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when you try to overwrite tier",
                "fullTitle": "Contract: Contribution #initializeTier throws when you try to overwrite tier",
                "timedOut": false,
                "duration": 523,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      await contribution.initializeToken(cnd.address);\n      await contribution.initializeTier(\n        0, tier1_deployed.address\n      );\n      await shouldThrow(contribution.initializeTier, [0, '0x0039F22efB07A647557C7C5d17854CFD6D489eF3']);\n      const tier = await contribution.tiers(0);\n      assert.equal(tier, tier1_deployed.address);",
                "err": {},
                "isRoot": false,
                "uuid": "441df831-355d-44d4-81b3-5ac06c729a4e",
                "parentUUID": "3c57cdf4-8b39-45cb-9e4a-078d27b14d71",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when you try to initialize 5 tiers",
                "fullTitle": "Contract: Contribution #initializeTier throws when you try to initialize 5 tiers",
                "timedOut": false,
                "duration": 3105,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      await deployThreeTiers(contribution.address);\n      await contribution.initializeToken(cnd.address);\n      await contribution.initializeTier(\n        0, tier1_deployed.address\n      );\n      await contribution.initializeTier(\n        1, tier2_deployed.address\n      );\n      await contribution.initializeTier(\n        2, tier3_deployed.address\n      );\n      await contribution.initializeTier(\n        3, tier4_deployed.address\n      );\n      await shouldThrow(contribution.initializeTier, [4, tier1_deployed.address]);\n      await shouldThrow(contribution.tiers, [4]);",
                "err": {},
                "isRoot": false,
                "uuid": "37df096b-d7c6-4acb-b232-75ca92453d90",
                "parentUUID": "3c57cdf4-8b39-45cb-9e4a-078d27b14d71",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": true,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 6497,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 300000,
        "file": "/test/contribution_test.js",
        "uuid": "8c5971da-6cf0-4cd1-a647-5b4f9205aef7",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: Contribution \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 12,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "57d1359d-65f0-4c51-ae67-837dfe3c70bc",
            "parentUUID": "8c5971da-6cf0-4cd1-a647-5b4f9205aef7",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: Contribution \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "1e6d34ad-80cf-412e-8059-0821e82d3109",
            "parentUUID": "8c5971da-6cf0-4cd1-a647-5b4f9205aef7",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: Contribution \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "949483e8-f4d6-4840-9f3a-b2e83a246458",
            "parentUUID": "8c5971da-6cf0-4cd1-a647-5b4f9205aef7",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "/Users/rstorm/repos/playFUckingGround/123/test/contribution_test.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "23423545-2ed9-4b2a-aac8-6043aeabee9e",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "#constructor accepts MiniMe instance",
      "fullTitle": "#contstructor #constructor accepts MiniMe instance",
      "timedOut": false,
      "duration": 372,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      const tokenFactory = await MiniMeTokenFactory.new();\n      const cnd = await CND.new(tokenFactory.address);\n      const contribution = await Contribution.new(\n        contributionWallet,\n        foundersWallet,\n        advisorsWallet,\n        bountyWallet\n      );\n      await cnd.changeController(contribution.address);\n      await contribution.initializeToken(cnd.address);\n      const miniMe = await contribution.cnd();\n      const contributionWalletAddress = await contribution.contributionWallet();\n      const foundersWalletAddress = await contribution.foundersWallet();\n      const bountyWalletAddress = await contribution.bountyWallet();\n      const advisorsWalletAddress = await contribution.advisorsWallet();\n      assert.equal(\n        miniMe,\n        cnd.address,\n        \"== token address\"\n      );\n      assert.equal(\n        contributionWalletAddress,\n        contributionWallet,\n        \"== contribution wallet address\"\n      );\n      assert.equal(\n        foundersWalletAddress,\n        foundersWallet,\n        \"== founders wallet address\"\n      );\n      assert.equal(\n        bountyWalletAddress,\n        bountyWallet,\n        \"== bounty wallet address\"\n      );\n      assert.equal(\n        advisorsWalletAddress,\n        advisorsWallet,\n        \"== advisors wallet address\"\n      );",
      "err": {},
      "isRoot": false,
      "uuid": "b923a9fc-4ffb-4c1a-aa92-34ae6685f4cd",
      "parentUUID": "76881cba-e8a7-4cfb-bc3c-4b32eeec7768",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if cnd.controller is not contribution contract",
      "fullTitle": "#contstructor throws if cnd.controller is not contribution contract",
      "timedOut": false,
      "duration": 520,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      const tokenFactory = await MiniMeTokenFactory.new();\n      const cnd = await CND.new(tokenFactory.address);\n      const contribution = await Contribution.new(\n        contributionWallet,\n        foundersWallet,\n        advisorsWallet,\n        bountyWallet\n      );\n      await shouldThrow(contribution.initializeToken, [cnd.address]);",
      "err": {},
      "isRoot": false,
      "uuid": "e2ae78fe-aff4-4c33-bd46-4e39a2d665d1",
      "parentUUID": "76881cba-e8a7-4cfb-bc3c-4b32eeec7768",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if it is not CND based contract",
      "fullTitle": "#contstructor throws if it is not CND based contract",
      "timedOut": false,
      "duration": 520,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      const tokenFactory = await MiniMeTokenFactory.new();\n      const genericMiniMe = await MiniMeToken.new(tokenFactory.address, '0x0', 0, \"MiniMe\", 18, \"MMT\", true);\n      const contribution = await Contribution.new(\n        contributionWallet,\n        foundersWallet,\n        advisorsWallet,\n        bountyWallet\n      );\n      await shouldThrow(contribution.initializeToken, [genericMiniMe.address]);",
      "err": {},
      "isRoot": false,
      "uuid": "e3ba15ca-7cbf-4c1a-9c8b-9820e4b1df6a",
      "parentUUID": "76881cba-e8a7-4cfb-bc3c-4b32eeec7768",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "can intialize 4 tiers",
      "fullTitle": "#initializeTier can intialize 4 tiers",
      "timedOut": false,
      "duration": 2498,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      await contribution.initializeToken(cnd.address);\n      await deployThreeTiers(contribution.address);\n      await contribution.initializeTier(\n        0, tier1_deployed.address\n      );\n      await contribution.initializeTier(\n        1, tier2_deployed.address\n      );\n      await contribution.initializeTier(\n        2, tier3_deployed.address\n      );\n      await contribution.initializeTier(\n        3, tier4_deployed.address\n      );\n      const tier1_from_contribution_array = await contribution.tiers(0);\n      assert.equal(tier1_from_contribution_array, tier1_deployed.address, \"Contribution can't save tier\");\n      const tier2_from_contribution_array = await contribution.tiers(1);\n      assert.equal(tier2_from_contribution_array, tier2_deployed.address, \"Contribution can't save tier\");\n      const tier3_from_contribution_array = await contribution.tiers(2);\n      assert.equal(tier3_from_contribution_array, tier3_deployed.address, \"Contribution can't save tier\");\n      const tier4_from_contribution_array = await contribution.tiers(3);\n      assert.equal(tier4_from_contribution_array, tier4_deployed.address, \"Contribution can't save tier\");",
      "err": {},
      "isRoot": false,
      "uuid": "7ca44278-26ee-4514-8f7b-115fd5e78ac6",
      "parentUUID": "3c57cdf4-8b39-45cb-9e4a-078d27b14d71",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when you try to initialize tier without token initialization",
      "fullTitle": "#initializeTier throws when you try to initialize tier without token initialization",
      "timedOut": false,
      "duration": 371,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      await shouldThrow(contribution.initializeTier, [0, tier1_deployed.address]);\n      const tier = await contribution.tiers(0);\n      assert.equal(tier, '0x0000000000000000000000000000000000000000');",
      "err": {},
      "isRoot": false,
      "uuid": "fb084bd0-0a90-4e61-8e15-ea2e43470163",
      "parentUUID": "3c57cdf4-8b39-45cb-9e4a-078d27b14d71",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when you try to overwrite tier",
      "fullTitle": "#initializeTier throws when you try to overwrite tier",
      "timedOut": false,
      "duration": 523,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      await contribution.initializeToken(cnd.address);\n      await contribution.initializeTier(\n        0, tier1_deployed.address\n      );\n      await shouldThrow(contribution.initializeTier, [0, '0x0039F22efB07A647557C7C5d17854CFD6D489eF3']);\n      const tier = await contribution.tiers(0);\n      assert.equal(tier, tier1_deployed.address);",
      "err": {},
      "isRoot": false,
      "uuid": "441df831-355d-44d4-81b3-5ac06c729a4e",
      "parentUUID": "3c57cdf4-8b39-45cb-9e4a-078d27b14d71",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when you try to initialize 5 tiers",
      "fullTitle": "#initializeTier throws when you try to initialize 5 tiers",
      "timedOut": false,
      "duration": 3105,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      await deployThreeTiers(contribution.address);\n      await contribution.initializeToken(cnd.address);\n      await contribution.initializeTier(\n        0, tier1_deployed.address\n      );\n      await contribution.initializeTier(\n        1, tier2_deployed.address\n      );\n      await contribution.initializeTier(\n        2, tier3_deployed.address\n      );\n      await contribution.initializeTier(\n        3, tier4_deployed.address\n      );\n      await shouldThrow(contribution.initializeTier, [4, tier1_deployed.address]);\n      await shouldThrow(contribution.tiers, [4]);",
      "err": {},
      "isRoot": false,
      "uuid": "37df096b-d7c6-4acb-b232-75ca92453d90",
      "parentUUID": "3c57cdf4-8b39-45cb-9e4a-078d27b14d71",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when called",
      "fullTitle": "fallback throws when called",
      "timedOut": false,
      "duration": 1149,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await shouldThrow(contribution.send, [tier1_params.minimum]);\n        await shouldThrow(tier1_deployed.send, [tier1_params.minimum]);\n        await shouldThrow(cnd.send, [tier1_params.minimum]);\n        const totalInvested = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvested, 0);",
      "err": {},
      "isRoot": false,
      "uuid": "89c60f9b-26de-495c-b296-68f5564b96b8",
      "parentUUID": "a5a090a2-1610-42ba-a294-deded7312b7a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "sends any amount after minimum was received",
      "fullTitle": "#proxyPayment sends any amount after minimum was received",
      "timedOut": false,
      "duration": 260,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n        await contribution.buy({from: owner, value: tier1_params.minimum});\n        await contribution.buy({from: owner, value: 1});\n        const expectedBalance = tier1_params.minimum.add(1).mul(tier1_params.exchangeRate).toString();\n        const balanceAfter = await cnd.balanceOf(owner);;\n        assert.equal(balanceAfter.toString(), expectedBalance);",
      "err": {},
      "isRoot": false,
      "uuid": "0ab8071a-404b-4f2d-a4ec-ad13d2e93723",
      "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "sends any amount after minimum was received",
      "fullTitle": "#proxyPayment sends any amount after minimum was received",
      "timedOut": false,
      "duration": 262,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n        await contribution.buy({from: owner, value: tier1_params.maxInvestorCap.sub(1)});\n        await contribution.buy({from: owner, value: tier1_params.maxInvestorCap});\n        const balanceAfter = await cnd.balanceOf(owner);\n        const expectedBalance = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate).toString();\n        assert.equal(balanceAfter.toString(), expectedBalance);",
      "err": {},
      "isRoot": false,
      "uuid": "2c17a72b-59b2-4a3d-9d61-ab650703f016",
      "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "allows to buy 1 whiteslited investor",
      "fullTitle": "#proxyPayment allows to buy 1 whiteslited investor",
      "timedOut": false,
      "duration": 1981,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        const pre = await web3.eth.getBalance(owner);\n        const weiToSend = tier1_params.minimum.mul(2);\n        const contWallBalanceBefore = await web3.eth.getBalance(contributionWallet);\n        const txReceipt = await contribution.buy({ from: owner, value: weiToSend });\n        const post = await web3.eth.getBalance(owner);\n        const postCon = await web3.eth.getBalance(contributionWallet);\n        assert(post.toNumber() < pre.toNumber(), 'post is more than pre');\n        const contWallBalanceAfter = await web3.eth.getBalance(contributionWallet);\n        assert.equal(contWallBalanceAfter.sub(contWallBalanceBefore).toNumber(), weiToSend.toNumber(), 'contributionWallet balance is not equal to weiToSend');\n        let totalNow = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalNow.toNumber(), weiToSend.toNumber(), 'totalWei is not equal to invested amount');\n        const totalSold = await contribution.totalTokensSold();\n        const userShouldReceiveTokens = weiToSend.mul(tier1_params.exchangeRate);\n        assert.equal(totalSold.toNumber(), userShouldReceiveTokens, 'totalSoldTokens is not equal to how much was sold');\n        let tokensLeft = await contribution.investorAmountTokensToBuy(owner);\n        assert.equal(tokensLeft.toNumber(), tier1_params.maxInvestorCap.sub(weiToSend).mul(tier1_params.exchangeRate));\n        const balance = await cnd.balanceOf(owner);\n        assert.equal(balance.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');",
      "err": {},
      "isRoot": false,
      "uuid": "c80d081a-9dcf-442a-b8e3-e753ef040ca6",
      "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "buys tokens on the amount available to buy and sends refund if it exceeds maxCapInvestor",
      "fullTitle": "#proxyPayment buys tokens on the amount available to buy and sends refund if it exceeds maxCapInvestor",
      "timedOut": false,
      "duration": 1055,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        const weiToSend = tier1_params.minimum.mul(2);\n        const contWallBalanceBefore = await web3.eth.getBalance(contributionWallet);\n        const txReceipt = await contribution.proxyPayment(owner, { from: owner, value: weiToSend });\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        const totalNow = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalNow.toNumber(), tier1_params.maxInvestorCap.toNumber());\n        const tokensLeft = await contribution.investorAmountTokensToBuy(owner);\n        assert.equal(tokensLeft.toNumber(), 0);\n        const isCapReached = await contribution.isCurrentTierCapReached();\n        assert.equal(isCapReached, false, 'capTier should not be full');\n        const contWallBalanceAfter = await web3.eth.getBalance(contributionWallet);\n        assert.equal(contWallBalanceAfter.sub(contWallBalanceBefore).toNumber(), tier1_params.maxInvestorCap.toNumber(), 'contributionWallet balance is not equal to maxCap');\n        const totalSold = await contribution.totalTokensSold();\n        const userShouldReceiveTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate);\n        assert.equal(totalSold.toNumber(), userShouldReceiveTokens, 'totalSoldTokens is not equal to how much was sold');\n        const balance = await cnd.balanceOf(owner);\n        assert.equal(balance.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');",
      "err": {},
      "isRoot": false,
      "uuid": "6d70c821-776b-467e-a4d1-1c38f4d80b19",
      "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "allows to buy with multisig contract",
      "fullTitle": "#proxyPayment allows to buy with multisig contract",
      "timedOut": false,
      "duration": 616,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        const multiSig = await MultiSigWallet.new([miner, owner], 1);\n        await web3.eth.sendTransaction({ from: miner, to: multiSig.address, value: tier1_params.maxInvestorCap.mul(2) });\n        await contribution.whitelistAddresses([multiSig.address], 0, true);\n        const encodedProxyPaymentCall = contribution.contract.proxyPayment.getData(contribution.address);\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        assert.equal(0, totalInvestedBefore.toNumber());\n        await multiSig.submitTransaction(contribution.address, tier1_params.maxInvestorCap, encodedProxyPaymentCall);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), tier1_params.maxInvestorCap.toNumber(), 'totalInvested is not equal to MaxCap');\n        const balanceOf = await cnd.balanceOf(multiSig.address);\n        assert.equal(balanceOf.toNumber(), tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate).toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "240e447a-97df-4f0c-b992-898c816629e1",
      "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if maxCapInvestor is reached",
      "fullTitle": "#proxyPayment throws if maxCapInvestor is reached",
      "timedOut": false,
      "duration": 480,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [owner, { from: owner, value: 1 }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "b47274d0-5e08-401d-9587-9cbe08ab910a",
      "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if tier cap is reached",
      "fullTitle": "#proxyPayment throws if tier cap is reached",
      "timedOut": false,
      "duration": 608,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await contribution.whitelistAddresses([advisorsWallet], 0, true);\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum });\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "6d9a996a-51ec-4d96-ad6e-e3e5bd433c79",
      "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if not whitelisted",
      "fullTitle": "#proxyPayment throws if not whitelisted",
      "timedOut": false,
      "duration": 403,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "3804d24c-cccc-49f2-98e5-03f85fe4d280",
      "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if endTime is passed",
      "fullTitle": "#proxyPayment throws if endTime is passed",
      "timedOut": false,
      "duration": 395,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await contribution.setBlockTimestamp(tier1_params.endTime + 1);\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [owner, { from: owner, value: tier1_params.maxInvestorCap }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "2150fbd3-3594-4401-9f41-40c496c8eb64",
      "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "reach totalCap happy path",
      "fullTitle": "#proxyPayment reach totalCap happy path",
      "timedOut": false,
      "duration": 444,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await contribution.whitelistAddresses([advisorsWallet], 0, true);\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.maxInvestorCap });\n        let totalNow = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalNow.toNumber(), tier1_params.totalCap.toNumber());\n        let tokensLeftOwner = await contribution.investorAmountTokensToBuy(owner);\n        assert.equal(tokensLeftOwner.toNumber(), 0);\n        let tokensLeftAdvisor = await contribution.investorAmountTokensToBuy(advisorsWallet);\n        // tier cap is 2 eth, we should only process 0.5 eth, so 1 eth * exchangeRate = 3 * 10**18 tokens\n        assert.equal(tokensLeftAdvisor.toNumber(), new BigNumber(10 ** 18 * 3));\n        const isCapReached = await contribution.isCurrentTierCapReached();\n        assert.equal(isCapReached, true);\n        const totalSold = await contribution.totalTokensSold();\n        assert.equal(totalSold, tier1_params.totalCap.mul(tier1_params.exchangeRate).toNumber());\n        const investedWei = await tier1_deployed.totalInvestedWei();\n        assert.equal(investedWei.toNumber(), tier1_params.totalCap.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "34acc0b5-4610-4958-8940-1455e973422f",
      "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "increases tierCount",
      "fullTitle": "#finalize increases tierCount",
      "timedOut": false,
      "duration": 89,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        let tierCount = await contribution.tierCount();\n        assert.equal(tierCount.toNumber(), 0);\n        await contribution.finalize();\n        tierCount = await contribution.tierCount();\n        assert.equal(tierCount.toNumber(), 1);",
      "err": {},
      "isRoot": false,
      "uuid": "cc4e3ccd-09b6-48fd-a15c-a666105bb1b8",
      "parentUUID": "444dbcca-3a5c-4250-9820-ed8d55e43542",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when you call finalize on non-existed tier",
      "fullTitle": "#finalize throws when you call finalize on non-existed tier",
      "timedOut": false,
      "duration": 425,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await contribution.finalize();\n        const tierCountBefore = await contribution.tierCount();\n        await shouldThrow(contribution.finalize,[]);\n        const tierCountAfter = await contribution.tierCount();\n        assert.equal(tierCountBefore.toNumber(), tierCountAfter.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "287c3a82-43b2-466a-97cc-ab0e13d8bf12",
      "parentUUID": "444dbcca-3a5c-4250-9820-ed8d55e43542",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "sets paused",
      "fullTitle": "#pauseContribution sets paused",
      "timedOut": false,
      "duration": 81,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        let paused = await contribution.paused();\n        assert.equal(paused, false);\n        await contribution.pauseContribution(true);\n        paused = await contribution.paused();\n        assert.equal(paused, true);",
      "err": {},
      "isRoot": false,
      "uuid": "050440f7-b3cf-4120-b025-0c21c6e0f886",
      "parentUUID": "00a43828-65a2-4229-9a98-85cbfb7c48ba",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when you proxyBuy with paused state",
      "fullTitle": "#pauseContribution throws when you proxyBuy with paused state",
      "timedOut": false,
      "duration": 471,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await contribution.pauseContribution(true);\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        await contribution.whitelistAddresses([owner], 0, true);\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [owner, { from: owner, value: tier1_params.maxInvestorCap }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "bda4bc75-b5e4-4bc5-bf86-6e0fe036063a",
      "parentUUID": "00a43828-65a2-4229-9a98-85cbfb7c48ba",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if non-owner calls it",
      "fullTitle": "#pauseContribution throws if non-owner calls it",
      "timedOut": false,
      "duration": 404,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        const before = await contribution.paused();\n        await shouldThrow(contribution.pauseContribution, [true, { from: advisorsWallet }]);\n        const after = await contribution.paused();\n        assert.equal(before, after);",
      "err": {},
      "isRoot": false,
      "uuid": "287fd26e-734b-48b0-a0b7-100869e63d51",
      "parentUUID": "00a43828-65a2-4229-9a98-85cbfb7c48ba",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path",
      "fullTitle": "#allocate happy path",
      "timedOut": false,
      "duration": 3306,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        const should = require('chai')\n          .use(require('chai-as-promised'))\n          .use(require('chai-bignumber')(BigNumber))\n          .should()\n        await deployThreeTiers(contribution.address);\n        await contribution.initializeToken(cnd.address);\n        await contribution.initializeTier(\n          0, tier1_deployed.address\n        );\n        await contribution.initializeTier(\n          1, tier2_deployed.address\n        );\n        await contribution.initializeTier(\n          2, tier3_deployed.address\n        );\n        await contribution.initializeTier(\n          3, tier4_deployed.address\n        );\n        await contribution.setBlockTimestamp(tier4_params.startTime);\n        await contribution.whitelistAddresses([owner], 0, true);\n        await contribution.finalize();\n        await contribution.finalize();\n        await contribution.finalize();\n        await contribution.proxyPayment(owner, { from: owner, value: tier4_params.maxInvestorCap });\n        const totalTokenSold = await contribution.totalTokensSold();\n        const totalSupply = totalTokenSold.mul(100).div(75);\n        const foundersAmount = totalSupply.div(5);\n        const advisorsAmount = totalSupply.mul(38).div(1000);\n        const bountyAmount = totalSupply.mul(12).div(1000);\n        await contribution.finalize();\n        //will be succesful\n        await contribution.allocate();\n        // will be rejected\n        await shouldThrow(contribution.allocate,[]);\n        const balanceFounders = await cnd.balanceOf(foundersWallet);\n        const balanceAdvisors = await cnd.balanceOf(advisorsWallet);\n        const balanceBounty = await cnd.balanceOf(bountyWallet);\n        foundersAmount.should.be.bignumber.equal(balanceFounders, 0, BigNumber.ROUND_DOWN, 'balanceFounders failed');\n        advisorsAmount.should.be.bignumber.equal(advisorsAmount, 0, BigNumber.ROUND_DOWN, 'balanceAdvisors failed');\n        bountyAmount.should.be.bignumber.equal(balanceBounty, 0, BigNumber.ROUND_DOWN, 'balanceBounty failed');",
      "err": {},
      "isRoot": false,
      "uuid": "c7b27562-ad3d-4af1-be34-de665f110d91",
      "parentUUID": "ec535d0d-f543-4281-a382-2cc1794a3494",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "sets transferrable",
      "fullTitle": "#allowTransfers sets transferrable",
      "timedOut": false,
      "duration": 281,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        let transferable = await contribution.transferable();\n        assert.equal(transferable, false);\n        await contribution.allowTransfers(true);\n        transferable = await contribution.transferable();\n        assert.equal(transferable, true);\n        let balanceMiner = await cnd.balanceOf(miner);\n        const userShouldReceiveTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate);\n        assert.equal(balanceMiner.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');\n        await cnd.transfer(foundersWallet, userShouldReceiveTokens, { from: miner });\n        const balanceFounder = await cnd.balanceOf(foundersWallet);\n        assert.equal(balanceFounder.toNumber(), userShouldReceiveTokens.toNumber(), 'founderwallet did not receive tokens');\n        balanceMiner = await cnd.balanceOf(miner);\n        assert.equal(balanceMiner.toNumber(), 0);",
      "err": {},
      "isRoot": false,
      "uuid": "f3684f63-2760-45ed-8acc-de8b46b99124",
      "parentUUID": "57ac30c8-dff6-45c3-a0b0-35ec1b481de4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "always allows to transfer after October 12",
      "fullTitle": "#allowTransfers always allows to transfer after October 12",
      "timedOut": false,
      "duration": 659,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        let transferable = await contribution.transferable();\n        assert.equal(transferable, false, 'transferable is true');\n        const balanceBeforeMiner = await cnd.balanceOf(miner);\n        await shouldThrow(cnd.transfer, [foundersWallet, tier1_params.maxInvestorCap, {from: miner}]);\n        let balanceAfterMiner = await cnd.balanceOf(miner);\n        assert.equal(balanceAfterMiner.toNumber(), balanceBeforeMiner.toNumber());\n        const numberOfTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate).toNumber();\n        assert.equal(balanceBeforeMiner.toNumber(), numberOfTokens);\n        const October12_2017_JS = new Date('October 12 2017 14:00:00').getTime()/1000;\n        await contribution.setBlockTimestamp(October12_2017_JS);\n        const contract_oct12 = await contribution.October12_2017();\n        assert(October12_2017_JS >= contract_oct12.toNumber());\n        await cnd.transfer(foundersWallet, numberOfTokens, {from: miner});\n        balanceAfterMiner = await cnd.balanceOf(miner);\n        assert.equal(balanceAfterMiner.toNumber(), 0);\n        const balanceFounder = await cnd.balanceOf(foundersWallet);\n        assert.equal(balanceFounder.toNumber(), balanceBeforeMiner.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "f0904ac5-b4e5-4bff-84d0-073319793aa1",
      "parentUUID": "57ac30c8-dff6-45c3-a0b0-35ec1b481de4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path - returns true",
      "fullTitle": "#contributionOpen happy path - returns true",
      "timedOut": false,
      "duration": 128,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        let contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, true);",
      "err": {},
      "isRoot": false,
      "uuid": "2baf19a5-08f3-4411-889f-5c17b782ab9b",
      "parentUUID": "d27ee7d6-0e02-43b8-8b0e-6a44cd4567ec",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "returns false when endTime passed",
      "fullTitle": "#contributionOpen returns false when endTime passed",
      "timedOut": false,
      "duration": 132,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        let contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);\n        await contribution.setBlockTimestamp(tier1_params.endTime + 1);\n        contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);",
      "err": {},
      "isRoot": false,
      "uuid": "861f60d4-bcf5-4782-bda4-ae466068f83d",
      "parentUUID": "d27ee7d6-0e02-43b8-8b0e-6a44cd4567ec",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "returns false when finalized was called",
      "fullTitle": "#contributionOpen returns false when finalized was called",
      "timedOut": false,
      "duration": 300,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        await contribution.whitelistAddresses([owner, advisorsWallet], 0, true);\n        await contribution.buy({ from: owner, value: tier1_params.maxInvestorCap });\n        await contribution.buy({ from: advisorsWallet, value: tier1_params.maxInvestorCap });\n        const finalizedTime = await tier1_deployed.finalizedTime();\n        assert(finalizedTime.toNumber() > 0);\n        contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);",
      "err": {},
      "isRoot": false,
      "uuid": "6127a312-f0b8-4396-b460-968327d8e252",
      "parentUUID": "d27ee7d6-0e02-43b8-8b0e-6a44cd4567ec",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "#constructor accepts MiniMe instance",
      "fullTitle": "#contstructor #constructor accepts MiniMe instance",
      "timedOut": false,
      "duration": 372,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      const tokenFactory = await MiniMeTokenFactory.new();\n      const cnd = await CND.new(tokenFactory.address);\n      const contribution = await Contribution.new(\n        contributionWallet,\n        foundersWallet,\n        advisorsWallet,\n        bountyWallet\n      );\n      await cnd.changeController(contribution.address);\n      await contribution.initializeToken(cnd.address);\n      const miniMe = await contribution.cnd();\n      const contributionWalletAddress = await contribution.contributionWallet();\n      const foundersWalletAddress = await contribution.foundersWallet();\n      const bountyWalletAddress = await contribution.bountyWallet();\n      const advisorsWalletAddress = await contribution.advisorsWallet();\n      assert.equal(\n        miniMe,\n        cnd.address,\n        \"== token address\"\n      );\n      assert.equal(\n        contributionWalletAddress,\n        contributionWallet,\n        \"== contribution wallet address\"\n      );\n      assert.equal(\n        foundersWalletAddress,\n        foundersWallet,\n        \"== founders wallet address\"\n      );\n      assert.equal(\n        bountyWalletAddress,\n        bountyWallet,\n        \"== bounty wallet address\"\n      );\n      assert.equal(\n        advisorsWalletAddress,\n        advisorsWallet,\n        \"== advisors wallet address\"\n      );",
      "err": {},
      "isRoot": false,
      "uuid": "b923a9fc-4ffb-4c1a-aa92-34ae6685f4cd",
      "parentUUID": "76881cba-e8a7-4cfb-bc3c-4b32eeec7768",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if cnd.controller is not contribution contract",
      "fullTitle": "#contstructor throws if cnd.controller is not contribution contract",
      "timedOut": false,
      "duration": 520,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      const tokenFactory = await MiniMeTokenFactory.new();\n      const cnd = await CND.new(tokenFactory.address);\n      const contribution = await Contribution.new(\n        contributionWallet,\n        foundersWallet,\n        advisorsWallet,\n        bountyWallet\n      );\n      await shouldThrow(contribution.initializeToken, [cnd.address]);",
      "err": {},
      "isRoot": false,
      "uuid": "e2ae78fe-aff4-4c33-bd46-4e39a2d665d1",
      "parentUUID": "76881cba-e8a7-4cfb-bc3c-4b32eeec7768",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if it is not CND based contract",
      "fullTitle": "#contstructor throws if it is not CND based contract",
      "timedOut": false,
      "duration": 520,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      const tokenFactory = await MiniMeTokenFactory.new();\n      const genericMiniMe = await MiniMeToken.new(tokenFactory.address, '0x0', 0, \"MiniMe\", 18, \"MMT\", true);\n      const contribution = await Contribution.new(\n        contributionWallet,\n        foundersWallet,\n        advisorsWallet,\n        bountyWallet\n      );\n      await shouldThrow(contribution.initializeToken, [genericMiniMe.address]);",
      "err": {},
      "isRoot": false,
      "uuid": "e3ba15ca-7cbf-4c1a-9c8b-9820e4b1df6a",
      "parentUUID": "76881cba-e8a7-4cfb-bc3c-4b32eeec7768",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "can intialize 4 tiers",
      "fullTitle": "#initializeTier can intialize 4 tiers",
      "timedOut": false,
      "duration": 2498,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      await contribution.initializeToken(cnd.address);\n      await deployThreeTiers(contribution.address);\n      await contribution.initializeTier(\n        0, tier1_deployed.address\n      );\n      await contribution.initializeTier(\n        1, tier2_deployed.address\n      );\n      await contribution.initializeTier(\n        2, tier3_deployed.address\n      );\n      await contribution.initializeTier(\n        3, tier4_deployed.address\n      );\n      const tier1_from_contribution_array = await contribution.tiers(0);\n      assert.equal(tier1_from_contribution_array, tier1_deployed.address, \"Contribution can't save tier\");\n      const tier2_from_contribution_array = await contribution.tiers(1);\n      assert.equal(tier2_from_contribution_array, tier2_deployed.address, \"Contribution can't save tier\");\n      const tier3_from_contribution_array = await contribution.tiers(2);\n      assert.equal(tier3_from_contribution_array, tier3_deployed.address, \"Contribution can't save tier\");\n      const tier4_from_contribution_array = await contribution.tiers(3);\n      assert.equal(tier4_from_contribution_array, tier4_deployed.address, \"Contribution can't save tier\");",
      "err": {},
      "isRoot": false,
      "uuid": "7ca44278-26ee-4514-8f7b-115fd5e78ac6",
      "parentUUID": "3c57cdf4-8b39-45cb-9e4a-078d27b14d71",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when you try to initialize tier without token initialization",
      "fullTitle": "#initializeTier throws when you try to initialize tier without token initialization",
      "timedOut": false,
      "duration": 371,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      await shouldThrow(contribution.initializeTier, [0, tier1_deployed.address]);\n      const tier = await contribution.tiers(0);\n      assert.equal(tier, '0x0000000000000000000000000000000000000000');",
      "err": {},
      "isRoot": false,
      "uuid": "fb084bd0-0a90-4e61-8e15-ea2e43470163",
      "parentUUID": "3c57cdf4-8b39-45cb-9e4a-078d27b14d71",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when you try to overwrite tier",
      "fullTitle": "#initializeTier throws when you try to overwrite tier",
      "timedOut": false,
      "duration": 523,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      await contribution.initializeToken(cnd.address);\n      await contribution.initializeTier(\n        0, tier1_deployed.address\n      );\n      await shouldThrow(contribution.initializeTier, [0, '0x0039F22efB07A647557C7C5d17854CFD6D489eF3']);\n      const tier = await contribution.tiers(0);\n      assert.equal(tier, tier1_deployed.address);",
      "err": {},
      "isRoot": false,
      "uuid": "441df831-355d-44d4-81b3-5ac06c729a4e",
      "parentUUID": "3c57cdf4-8b39-45cb-9e4a-078d27b14d71",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when you try to initialize 5 tiers",
      "fullTitle": "#initializeTier throws when you try to initialize 5 tiers",
      "timedOut": false,
      "duration": 3105,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      await deployThreeTiers(contribution.address);\n      await contribution.initializeToken(cnd.address);\n      await contribution.initializeTier(\n        0, tier1_deployed.address\n      );\n      await contribution.initializeTier(\n        1, tier2_deployed.address\n      );\n      await contribution.initializeTier(\n        2, tier3_deployed.address\n      );\n      await contribution.initializeTier(\n        3, tier4_deployed.address\n      );\n      await shouldThrow(contribution.initializeTier, [4, tier1_deployed.address]);\n      await shouldThrow(contribution.tiers, [4]);",
      "err": {},
      "isRoot": false,
      "uuid": "37df096b-d7c6-4acb-b232-75ca92453d90",
      "parentUUID": "3c57cdf4-8b39-45cb-9e4a-078d27b14d71",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when called",
      "fullTitle": "fallback throws when called",
      "timedOut": false,
      "duration": 1149,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await shouldThrow(contribution.send, [tier1_params.minimum]);\n        await shouldThrow(tier1_deployed.send, [tier1_params.minimum]);\n        await shouldThrow(cnd.send, [tier1_params.minimum]);\n        const totalInvested = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvested, 0);",
      "err": {},
      "isRoot": false,
      "uuid": "89c60f9b-26de-495c-b296-68f5564b96b8",
      "parentUUID": "a5a090a2-1610-42ba-a294-deded7312b7a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "sends any amount after minimum was received",
      "fullTitle": "#proxyPayment sends any amount after minimum was received",
      "timedOut": false,
      "duration": 260,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n        await contribution.buy({from: owner, value: tier1_params.minimum});\n        await contribution.buy({from: owner, value: 1});\n        const expectedBalance = tier1_params.minimum.add(1).mul(tier1_params.exchangeRate).toString();\n        const balanceAfter = await cnd.balanceOf(owner);;\n        assert.equal(balanceAfter.toString(), expectedBalance);",
      "err": {},
      "isRoot": false,
      "uuid": "0ab8071a-404b-4f2d-a4ec-ad13d2e93723",
      "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "sends any amount after minimum was received",
      "fullTitle": "#proxyPayment sends any amount after minimum was received",
      "timedOut": false,
      "duration": 262,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n        await contribution.buy({from: owner, value: tier1_params.maxInvestorCap.sub(1)});\n        await contribution.buy({from: owner, value: tier1_params.maxInvestorCap});\n        const balanceAfter = await cnd.balanceOf(owner);\n        const expectedBalance = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate).toString();\n        assert.equal(balanceAfter.toString(), expectedBalance);",
      "err": {},
      "isRoot": false,
      "uuid": "2c17a72b-59b2-4a3d-9d61-ab650703f016",
      "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "allows to buy 1 whiteslited investor",
      "fullTitle": "#proxyPayment allows to buy 1 whiteslited investor",
      "timedOut": false,
      "duration": 1981,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        const pre = await web3.eth.getBalance(owner);\n        const weiToSend = tier1_params.minimum.mul(2);\n        const contWallBalanceBefore = await web3.eth.getBalance(contributionWallet);\n        const txReceipt = await contribution.buy({ from: owner, value: weiToSend });\n        const post = await web3.eth.getBalance(owner);\n        const postCon = await web3.eth.getBalance(contributionWallet);\n        assert(post.toNumber() < pre.toNumber(), 'post is more than pre');\n        const contWallBalanceAfter = await web3.eth.getBalance(contributionWallet);\n        assert.equal(contWallBalanceAfter.sub(contWallBalanceBefore).toNumber(), weiToSend.toNumber(), 'contributionWallet balance is not equal to weiToSend');\n        let totalNow = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalNow.toNumber(), weiToSend.toNumber(), 'totalWei is not equal to invested amount');\n        const totalSold = await contribution.totalTokensSold();\n        const userShouldReceiveTokens = weiToSend.mul(tier1_params.exchangeRate);\n        assert.equal(totalSold.toNumber(), userShouldReceiveTokens, 'totalSoldTokens is not equal to how much was sold');\n        let tokensLeft = await contribution.investorAmountTokensToBuy(owner);\n        assert.equal(tokensLeft.toNumber(), tier1_params.maxInvestorCap.sub(weiToSend).mul(tier1_params.exchangeRate));\n        const balance = await cnd.balanceOf(owner);\n        assert.equal(balance.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');",
      "err": {},
      "isRoot": false,
      "uuid": "c80d081a-9dcf-442a-b8e3-e753ef040ca6",
      "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "buys tokens on the amount available to buy and sends refund if it exceeds maxCapInvestor",
      "fullTitle": "#proxyPayment buys tokens on the amount available to buy and sends refund if it exceeds maxCapInvestor",
      "timedOut": false,
      "duration": 1055,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        const weiToSend = tier1_params.minimum.mul(2);\n        const contWallBalanceBefore = await web3.eth.getBalance(contributionWallet);\n        const txReceipt = await contribution.proxyPayment(owner, { from: owner, value: weiToSend });\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        const totalNow = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalNow.toNumber(), tier1_params.maxInvestorCap.toNumber());\n        const tokensLeft = await contribution.investorAmountTokensToBuy(owner);\n        assert.equal(tokensLeft.toNumber(), 0);\n        const isCapReached = await contribution.isCurrentTierCapReached();\n        assert.equal(isCapReached, false, 'capTier should not be full');\n        const contWallBalanceAfter = await web3.eth.getBalance(contributionWallet);\n        assert.equal(contWallBalanceAfter.sub(contWallBalanceBefore).toNumber(), tier1_params.maxInvestorCap.toNumber(), 'contributionWallet balance is not equal to maxCap');\n        const totalSold = await contribution.totalTokensSold();\n        const userShouldReceiveTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate);\n        assert.equal(totalSold.toNumber(), userShouldReceiveTokens, 'totalSoldTokens is not equal to how much was sold');\n        const balance = await cnd.balanceOf(owner);\n        assert.equal(balance.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');",
      "err": {},
      "isRoot": false,
      "uuid": "6d70c821-776b-467e-a4d1-1c38f4d80b19",
      "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "allows to buy with multisig contract",
      "fullTitle": "#proxyPayment allows to buy with multisig contract",
      "timedOut": false,
      "duration": 616,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        const multiSig = await MultiSigWallet.new([miner, owner], 1);\n        await web3.eth.sendTransaction({ from: miner, to: multiSig.address, value: tier1_params.maxInvestorCap.mul(2) });\n        await contribution.whitelistAddresses([multiSig.address], 0, true);\n        const encodedProxyPaymentCall = contribution.contract.proxyPayment.getData(contribution.address);\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        assert.equal(0, totalInvestedBefore.toNumber());\n        await multiSig.submitTransaction(contribution.address, tier1_params.maxInvestorCap, encodedProxyPaymentCall);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), tier1_params.maxInvestorCap.toNumber(), 'totalInvested is not equal to MaxCap');\n        const balanceOf = await cnd.balanceOf(multiSig.address);\n        assert.equal(balanceOf.toNumber(), tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate).toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "240e447a-97df-4f0c-b992-898c816629e1",
      "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if maxCapInvestor is reached",
      "fullTitle": "#proxyPayment throws if maxCapInvestor is reached",
      "timedOut": false,
      "duration": 480,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [owner, { from: owner, value: 1 }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "b47274d0-5e08-401d-9587-9cbe08ab910a",
      "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if tier cap is reached",
      "fullTitle": "#proxyPayment throws if tier cap is reached",
      "timedOut": false,
      "duration": 608,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await contribution.whitelistAddresses([advisorsWallet], 0, true);\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum });\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "6d9a996a-51ec-4d96-ad6e-e3e5bd433c79",
      "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if not whitelisted",
      "fullTitle": "#proxyPayment throws if not whitelisted",
      "timedOut": false,
      "duration": 403,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "3804d24c-cccc-49f2-98e5-03f85fe4d280",
      "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if endTime is passed",
      "fullTitle": "#proxyPayment throws if endTime is passed",
      "timedOut": false,
      "duration": 395,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await contribution.setBlockTimestamp(tier1_params.endTime + 1);\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [owner, { from: owner, value: tier1_params.maxInvestorCap }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "2150fbd3-3594-4401-9f41-40c496c8eb64",
      "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "reach totalCap happy path",
      "fullTitle": "#proxyPayment reach totalCap happy path",
      "timedOut": false,
      "duration": 444,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await contribution.whitelistAddresses([advisorsWallet], 0, true);\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.maxInvestorCap });\n        let totalNow = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalNow.toNumber(), tier1_params.totalCap.toNumber());\n        let tokensLeftOwner = await contribution.investorAmountTokensToBuy(owner);\n        assert.equal(tokensLeftOwner.toNumber(), 0);\n        let tokensLeftAdvisor = await contribution.investorAmountTokensToBuy(advisorsWallet);\n        // tier cap is 2 eth, we should only process 0.5 eth, so 1 eth * exchangeRate = 3 * 10**18 tokens\n        assert.equal(tokensLeftAdvisor.toNumber(), new BigNumber(10 ** 18 * 3));\n        const isCapReached = await contribution.isCurrentTierCapReached();\n        assert.equal(isCapReached, true);\n        const totalSold = await contribution.totalTokensSold();\n        assert.equal(totalSold, tier1_params.totalCap.mul(tier1_params.exchangeRate).toNumber());\n        const investedWei = await tier1_deployed.totalInvestedWei();\n        assert.equal(investedWei.toNumber(), tier1_params.totalCap.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "34acc0b5-4610-4958-8940-1455e973422f",
      "parentUUID": "dde08ce7-b6e2-4177-9bc5-ddff51bd820f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "increases tierCount",
      "fullTitle": "#finalize increases tierCount",
      "timedOut": false,
      "duration": 89,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        let tierCount = await contribution.tierCount();\n        assert.equal(tierCount.toNumber(), 0);\n        await contribution.finalize();\n        tierCount = await contribution.tierCount();\n        assert.equal(tierCount.toNumber(), 1);",
      "err": {},
      "isRoot": false,
      "uuid": "cc4e3ccd-09b6-48fd-a15c-a666105bb1b8",
      "parentUUID": "444dbcca-3a5c-4250-9820-ed8d55e43542",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when you call finalize on non-existed tier",
      "fullTitle": "#finalize throws when you call finalize on non-existed tier",
      "timedOut": false,
      "duration": 425,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await contribution.finalize();\n        const tierCountBefore = await contribution.tierCount();\n        await shouldThrow(contribution.finalize,[]);\n        const tierCountAfter = await contribution.tierCount();\n        assert.equal(tierCountBefore.toNumber(), tierCountAfter.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "287c3a82-43b2-466a-97cc-ab0e13d8bf12",
      "parentUUID": "444dbcca-3a5c-4250-9820-ed8d55e43542",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "sets paused",
      "fullTitle": "#pauseContribution sets paused",
      "timedOut": false,
      "duration": 81,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        let paused = await contribution.paused();\n        assert.equal(paused, false);\n        await contribution.pauseContribution(true);\n        paused = await contribution.paused();\n        assert.equal(paused, true);",
      "err": {},
      "isRoot": false,
      "uuid": "050440f7-b3cf-4120-b025-0c21c6e0f886",
      "parentUUID": "00a43828-65a2-4229-9a98-85cbfb7c48ba",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when you proxyBuy with paused state",
      "fullTitle": "#pauseContribution throws when you proxyBuy with paused state",
      "timedOut": false,
      "duration": 471,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await contribution.pauseContribution(true);\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        await contribution.whitelistAddresses([owner], 0, true);\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [owner, { from: owner, value: tier1_params.maxInvestorCap }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "bda4bc75-b5e4-4bc5-bf86-6e0fe036063a",
      "parentUUID": "00a43828-65a2-4229-9a98-85cbfb7c48ba",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if non-owner calls it",
      "fullTitle": "#pauseContribution throws if non-owner calls it",
      "timedOut": false,
      "duration": 404,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        const before = await contribution.paused();\n        await shouldThrow(contribution.pauseContribution, [true, { from: advisorsWallet }]);\n        const after = await contribution.paused();\n        assert.equal(before, after);",
      "err": {},
      "isRoot": false,
      "uuid": "287fd26e-734b-48b0-a0b7-100869e63d51",
      "parentUUID": "00a43828-65a2-4229-9a98-85cbfb7c48ba",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path",
      "fullTitle": "#allocate happy path",
      "timedOut": false,
      "duration": 3306,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        const should = require('chai')\n          .use(require('chai-as-promised'))\n          .use(require('chai-bignumber')(BigNumber))\n          .should()\n        await deployThreeTiers(contribution.address);\n        await contribution.initializeToken(cnd.address);\n        await contribution.initializeTier(\n          0, tier1_deployed.address\n        );\n        await contribution.initializeTier(\n          1, tier2_deployed.address\n        );\n        await contribution.initializeTier(\n          2, tier3_deployed.address\n        );\n        await contribution.initializeTier(\n          3, tier4_deployed.address\n        );\n        await contribution.setBlockTimestamp(tier4_params.startTime);\n        await contribution.whitelistAddresses([owner], 0, true);\n        await contribution.finalize();\n        await contribution.finalize();\n        await contribution.finalize();\n        await contribution.proxyPayment(owner, { from: owner, value: tier4_params.maxInvestorCap });\n        const totalTokenSold = await contribution.totalTokensSold();\n        const totalSupply = totalTokenSold.mul(100).div(75);\n        const foundersAmount = totalSupply.div(5);\n        const advisorsAmount = totalSupply.mul(38).div(1000);\n        const bountyAmount = totalSupply.mul(12).div(1000);\n        await contribution.finalize();\n        //will be succesful\n        await contribution.allocate();\n        // will be rejected\n        await shouldThrow(contribution.allocate,[]);\n        const balanceFounders = await cnd.balanceOf(foundersWallet);\n        const balanceAdvisors = await cnd.balanceOf(advisorsWallet);\n        const balanceBounty = await cnd.balanceOf(bountyWallet);\n        foundersAmount.should.be.bignumber.equal(balanceFounders, 0, BigNumber.ROUND_DOWN, 'balanceFounders failed');\n        advisorsAmount.should.be.bignumber.equal(advisorsAmount, 0, BigNumber.ROUND_DOWN, 'balanceAdvisors failed');\n        bountyAmount.should.be.bignumber.equal(balanceBounty, 0, BigNumber.ROUND_DOWN, 'balanceBounty failed');",
      "err": {},
      "isRoot": false,
      "uuid": "c7b27562-ad3d-4af1-be34-de665f110d91",
      "parentUUID": "ec535d0d-f543-4281-a382-2cc1794a3494",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "sets transferrable",
      "fullTitle": "#allowTransfers sets transferrable",
      "timedOut": false,
      "duration": 281,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        let transferable = await contribution.transferable();\n        assert.equal(transferable, false);\n        await contribution.allowTransfers(true);\n        transferable = await contribution.transferable();\n        assert.equal(transferable, true);\n        let balanceMiner = await cnd.balanceOf(miner);\n        const userShouldReceiveTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate);\n        assert.equal(balanceMiner.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');\n        await cnd.transfer(foundersWallet, userShouldReceiveTokens, { from: miner });\n        const balanceFounder = await cnd.balanceOf(foundersWallet);\n        assert.equal(balanceFounder.toNumber(), userShouldReceiveTokens.toNumber(), 'founderwallet did not receive tokens');\n        balanceMiner = await cnd.balanceOf(miner);\n        assert.equal(balanceMiner.toNumber(), 0);",
      "err": {},
      "isRoot": false,
      "uuid": "f3684f63-2760-45ed-8acc-de8b46b99124",
      "parentUUID": "57ac30c8-dff6-45c3-a0b0-35ec1b481de4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "always allows to transfer after October 12",
      "fullTitle": "#allowTransfers always allows to transfer after October 12",
      "timedOut": false,
      "duration": 659,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        let transferable = await contribution.transferable();\n        assert.equal(transferable, false, 'transferable is true');\n        const balanceBeforeMiner = await cnd.balanceOf(miner);\n        await shouldThrow(cnd.transfer, [foundersWallet, tier1_params.maxInvestorCap, {from: miner}]);\n        let balanceAfterMiner = await cnd.balanceOf(miner);\n        assert.equal(balanceAfterMiner.toNumber(), balanceBeforeMiner.toNumber());\n        const numberOfTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate).toNumber();\n        assert.equal(balanceBeforeMiner.toNumber(), numberOfTokens);\n        const October12_2017_JS = new Date('October 12 2017 14:00:00').getTime()/1000;\n        await contribution.setBlockTimestamp(October12_2017_JS);\n        const contract_oct12 = await contribution.October12_2017();\n        assert(October12_2017_JS >= contract_oct12.toNumber());\n        await cnd.transfer(foundersWallet, numberOfTokens, {from: miner});\n        balanceAfterMiner = await cnd.balanceOf(miner);\n        assert.equal(balanceAfterMiner.toNumber(), 0);\n        const balanceFounder = await cnd.balanceOf(foundersWallet);\n        assert.equal(balanceFounder.toNumber(), balanceBeforeMiner.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "f0904ac5-b4e5-4bff-84d0-073319793aa1",
      "parentUUID": "57ac30c8-dff6-45c3-a0b0-35ec1b481de4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path - returns true",
      "fullTitle": "#contributionOpen happy path - returns true",
      "timedOut": false,
      "duration": 128,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        let contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, true);",
      "err": {},
      "isRoot": false,
      "uuid": "2baf19a5-08f3-4411-889f-5c17b782ab9b",
      "parentUUID": "d27ee7d6-0e02-43b8-8b0e-6a44cd4567ec",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "returns false when endTime passed",
      "fullTitle": "#contributionOpen returns false when endTime passed",
      "timedOut": false,
      "duration": 132,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        let contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);\n        await contribution.setBlockTimestamp(tier1_params.endTime + 1);\n        contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);",
      "err": {},
      "isRoot": false,
      "uuid": "861f60d4-bcf5-4782-bda4-ae466068f83d",
      "parentUUID": "d27ee7d6-0e02-43b8-8b0e-6a44cd4567ec",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "returns false when finalized was called",
      "fullTitle": "#contributionOpen returns false when finalized was called",
      "timedOut": false,
      "duration": 300,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        await contribution.whitelistAddresses([owner, advisorsWallet], 0, true);\n        await contribution.buy({ from: owner, value: tier1_params.maxInvestorCap });\n        await contribution.buy({ from: advisorsWallet, value: tier1_params.maxInvestorCap });\n        const finalizedTime = await tier1_deployed.finalizedTime();\n        assert(finalizedTime.toNumber() > 0);\n        contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);",
      "err": {},
      "isRoot": false,
      "uuid": "6127a312-f0b8-4396-b460-968327d8e252",
      "parentUUID": "d27ee7d6-0e02-43b8-8b0e-6a44cd4567ec",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}